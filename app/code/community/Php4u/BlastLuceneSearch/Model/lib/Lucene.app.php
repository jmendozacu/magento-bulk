<?php
/**
 * @category   Php4u
 * @package    Php4u_BlastLuceneSearch
 * @author     Marcin Szterling <marcin@php4u.co.uk>
 * @copyright  Php4u Marcin Szterling (c) 2013
 * @license http://php4u.co.uk/licence/
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * Any form of distribution, sell, transfer, reverse engineering forbidden - see licence above
 *
 * Code was obfuscated due to previous licence violations
 */ 
$_F=__FILE__;$_X="$_F=__FILE__;$_X="JF9GPV9fRklMRV9fOyRfWD0iSkY5R1BWOWZSa2xNUlY5Zk95UmZXRDBpU2tZNVIxQldPV1pTYTJ4TlVsWTVaazk1VW1aWFJEQnBVMnRaTlZJeFFsZFBWMXBUWVRKNFRsVnNXVFZhYXprMVZXMWFXRkpFUW5CVk1uUmFUbFpKZUZGc1pGQldNWEJVV1ZSS05GUnNWbk5YVkZaaFlYcHJNVlpYTVdGWFJrcEZVVzVDVjFKWGFIcGFSekZQVm14V2MxTnRiRTVpVmtwT1YxWmFWMU14Um5OYVJsWlVZVEpTVDFWdE5VTlhWbVJ5WVVkR2FHSlZjREJhUldNeFZrWmFWazVWVWxkV2JWSklWVEZhUjFaV1JuUmtSbHBYVWxWd1RsWlVSbGRVTWxKellqTm9VMkV5ZUZOWmJHUnZXVlpTV0U1V1RtbE5WMUo0VlRKNFlWbFZNVWhsUlZaV1ZtMVNjbFp0ZUVwbFYwWkZWR3hXYUUxdGFGbFdNakUwVWpKU1NGWnJhR2hTTTBKUFZGWldkMVF4WkhKWGJYUlZUV3R3U1ZVeU5WTldNa3BIVTIxb1YyRnJTbWhVYkZwclZsWk9kRTVXVm1oTlJGWXpWbFphYjFJeFRuTlRiRnBVWWxSc2FGVnRNVzlXUm14eFUydHdiR0pGTlZsWGExWjNWV3N4UmxkdVZsWk5WbHBYV2xWa1IxTkdVblZWYkZacFlUQndkMWRXV2xkVE1WcFhZMFpvVDFack5YQlZha0V4VFVad1ZtRkZUbWhXTUhCWlZrY3dNVlpzU2xoVWFsSmFWbGRTVUZwRldsTmtWa1owWWtkb1RsSlhPVFpXTVZwWFlqRkdjazFWYUZaaVJrcFFWbXBPUTJOR2NGZFZiRnBzVW0xNFdsbHVjRU5XVjBWM1RsaGtWbFp0YUVoVk1uaExWbXhPZFZKc2NHaGhlbFpGVmtkNGExUXlVa2hUYTJoUFZqSm9WVlZ0ZEdGa1ZsVjRWbTFHVWsxcmJEVldSM1JYVm0xR2NsZHJkRlppUmtwSVdXcEdjbVZWTVZaUFYzQlRUVWhDTTFaV1pEUlZNa3BJVTI1T1ZHSnJOV0ZVVjNCR1RVWnJkMXBGZEd0U2JYUTFWMnRXTkZVd01VVlNhazVXVFZaYVZGVXlNVkprTURGWFZteE9WMVpHV2taWFZscFhVakpXUjFSc1dsZGhNRFZ4VkZkMFlWZFdXa2hOVkZKb1ZqQndlVlJzYUU5V1JscFlWVzVhVlZaWFVsUlZNVnBIVmxaa2NrMVhlRmRTTTJRMlZqRmFWMkl4Um5KTlZXaFdZa1pLVUZacVRrTmpSbkJYVld4YWJGSnRlRnBaV0hCWFlXc3hjbGRzYkZkU2VrVXdXVlprUzFack5WbFViRlpVVWpBMGVsWlljRU5qTVVwSVUxaHNZVkp0VWxSV2FrcHZVMFpWZUZadFJsVk5WbHBJVlRJMVQxWnRTa2hoUms1WFlsaFNNMVZxUms5V2JGcDFWR3hrVTFZemFFbFdWbVEwVkRGYVZrMVdaR3BTV0ZKWFdWUkdZVmRHVm5OV2JrNVRVbXMxZVZVeWVHRmlSbHBXWTBWNFYySkhhSHBWTWpGT1pESktSbHBIUmxOWFJVcFpWbGQ0YTJJeFZsZFhiazVZWWtWd2FGUldXbk5OTVZaMFpVVTVWMkpWVmpOV01uaERWakpGZUdOSWJGaGhhMXBUV2tSR2ExZEdjRWRUYkdSWFVteHdiMVpVUmxkV01ERkhWRzVPVm1KcmNGZFdNRlV4VXpGV2MxZHRSbGhpUm5CWFZqSjBNRlV5U2tkV2FsSlhVbTFTY2xac1ZYaFdiVXBHVDFaS1RtSllhRVJYVkVaWFl6RktkRk5yV2s5V2JIQlVWakJrYjFSR1dsaGxSbVJXWWxVeE0xbHJWbUZoVmtwVllrWk9WVlpYYUhaV2FrWlhZMnhhZFZSc1ZrNVdWemg0Vmxaa01GUXhXWGhYYms1VFlsUldXRlZxVGs1TlZscHpWbTVPVTJKV1drZFpNRnBYVmpGWmVtRkdaRmRXTTJoWVZsZDRkbVZHWkhKWGJFSlRUV3hLV1ZaWGVHdGlNVWw0Vkd4YVdHSllVbE5aYTFwaFpXeFZlV1JGZEZkV01IQklWVEowTUZadFNrZGpSVGxZWVd0YVUxcEVSbXRYUm5CSFZteGtWMkpJUWxaV2JGcFRVVEpKZUZKdVRsWmlhelZYV1ZSQ2QxVXhiRlZUYWxKVllrWldORll5ZUU5WFIwVjZZVVZPVlZaV1dYZFZNbmhHWlZVNVdFNVdXbWxYUmtvMlZtMTRZVlV5VG5OWGJrNVdZa1p3YzFac1ZuZFRWbHB5Vld0a1ZHSkhPVFJWYlhoVFZXMUtSbGRzVGxkaVdGSXpWbTE0Vm1WR1duSlBWbVJwVW10d1NGWlhNVFJVTVU1elUyNUtWR0pIVWxoV2FrNXZVa1phVmxkc1dtdE5WbkJaVjJ0YVMxWXhXa2RYYTJSV1RWWmFWMVJXV2xkU01WWjFVMjFzVTFaSGVGVlhWM1JYWkRGTmVGZHJhR3RTTTFKVVdXdGFTMVl4V25SamVsWlhUVlZaTWxaWE1ERldhekZYVmxoa1dHRnJXbFJaTW5NMVUwWndSMVJzWkdsVFJVcEpWbTEwYTA1R1ZuTmlNMmhYVjBkU2IxVnNWbmRXYkZaellVZDBhV0pHY0hsV2JUQTFWVEpGZUZOc1RscGhhM0J5VmtWa1IxWnNUbkpVYkdScFVtNUNWVlpVUm1GVmJWWkhWRzVPVm1FelFsUldhMlEwVmxaVmVGWnNaRlZOVmxwSVZtMTBhMkZXU25KT1ZsWlhZa2RTVkZVeWVHRmpiRkp5Vkd4U1YySkZXWHBYYkZaWFZqRlZlRmR1U21wU2JGcFZWbXhhWVZSR1ZuUmtTRTVUWWxaYVIxa3dXa3RXTVZwWlVXczVWMVl6YUZCVlZFWktaVVpXV1dGR1VsZE5iRXBVVm0xNFUxWXhiRmRVYkZwWFlYcHNWbFp0ZEdGV01XeHlWbFJHVlZaclZqTlZNblJoVm14YWMxWnFVbFpXTTJoTFdrUkdZV014Vm5KalJrNVhVak5vVmxaVVJsZFdhelZYVjJ4a1ZXRXhjRmhaYTFVeFVteGFWMWw2Vm1saVJURTFXV3RXVDFaV1duSk9WbVJXWWxoU1VGWnJXbUZYVjBaR1pFWmthRTFZUWpWWFdIQkRZekZKZUdORldtbFNhelZZV1d0V2QxTXhXbGhsUjBaVVlrYzVORlpIZUdGVU1VbDVWV3hPVjJKR1NsUlpiWGhYVmpGYWNrOVdaRmRoZWxaWVZrUkdWazVXVG5OVGJGWnBVbGRvVlZac1dtRlZSbHBXVjJ4T2FrMVdXbnBXUjNoTFZqRmFWVlpzWkZkU1ZscFFWVlJHWVZZeFZsbGhSbEpwVW14d1RGWlhlRk5qTVZwSFZHeGFWMVpHV2xoV2JYTXhVakZhZEdWRk9WZE5SRVpKV2xWYVYxWnRTa1pPU0hCWVlXdGFTRlpxUms5amJVNUhWMnMxVTAweWFGSldiR014WXpGRmVGTllhRmRpYTNCUlZteFNWMVJzVmxkVmEwNVZVbXMxVjFaSE5XRlpWVEZYVW1wU1YySllhRmhWTW5oTFZsZEtSbUZHVWxkV2JGVjRWbXhTUTJNeFNuUlRhMXBRVmxoQ1ZGWnNVbGRWYkZweVdraHdUbFpyY0hwVmJHaHZWbTFGZWxGc1dsVldWa3BVV1cxNFlXTldSblZVYkdSWFlYcFdSbFpXWkRSV01WcEhVMnhrVjJKVVZsaFdhMVpHVFZaV2NWSnRSbE5OV0VKSFZUSjRZV0ZGTVZkWGJsWlhZVEZLU0ZVeWVIWmxSbVJ5VjIxb1UxWnVRa3hXVnpFMFdWWmFWMVp1VGxWaE1EVlhWVzE0WVdReFZsaGxSVTVYVFZWd1dWbFZWbXRXTVZsNVpVVlNWbUpHY0V4V2JYaExZMnN4VjFWc1pGZFNiSEJMVm0xNGIyTXhSWGhVYms1V1lsUldUMVZzYUZOVE1WWlZVMVJXYVdKR2NIbFdiVEExVlRKRmVXVkZhRmRTTTJoRVZsUktTMUl4VG5OaVJscFhZa2hDVFZaWE1UQk9SMHB5VFZWYWExSllRbE5VVjNCelpGWmFWMWR0Y0U1V1ZGWlhXV3RXYjFkSFNuTmpTRVphWWtaS1JGbHRlSE5qVms1elkwZEdUbGRGU2twWFYzUlRVVEpHZEZOc2FHeFRSVXBvVlcweGIxWkdhM2RhUlhCc1ZsUldTbFpIZEhkV1JrcFZWbTV3V0ZZelVuSlVWRXBPWkRKS1JtSkdXbWxpV0dob1ZtMDFkMVl3TlhOYVNGSk9WbTFTYzFac1pEUlRWbGw1VGxkR2FHSlZjRmRaTUdoclYwZEZlVlZzVWxwaE1sSk1XVEJrVW1WV2NFaGpSMnhYWWtkM01WWnFTalJpTVUxNVZtNU9hbEpzU2xOWmJHaHZZMFpzYzFwR1RtdE5WM2d3VkZaYWEyRldTWGRPVkVKYVlUSm9XRmRXWkZkV2JFNTFWV3h3YUdGNlZrMVhWbHByVWpGa1IxWnVVbXRTTUZwWVdsZDRTMlJXV2taWGF6bFNUV3hhZWxrd1dtOVdNVmw1Vlc1Q1ZtRnJiekJaTVZwcll6RnNObEp0YUdsVFJVcFdWbFpqZUdJeFpIUlRiRlpvVFRKNFdWbHJWbGROTVZZMlVXNU9VMUl3YkROVWJGWlRZVVphVmxkcVVsWk5WbHBZVmtSS1UyTXlUa1poUm1SWFRXeEtlVlpHWkRCWlZUVnpWR3hhV21Wc1dtOVdiVFZEVFZaYWRFNVlaRmhpUm13elZHdG9hMWRIU2toVmJFNVlZV3RhTTFVeFdtRmtSMVpHWTBaU1UyRXlPVFZXVkVaWFlqRkZlVlpzWkdwU2JYaFpXVzEwUzJOR1VsVlNiVVpQWWtVMVYxZHJVbE5oYkVwMFpFUldWMkpVVmxoV01uTjRZekZhZEU1WFJsTmxhMW8yVjJ0amVGTXhUa2RUYmtaU1lsZG9XRnBYTVRObFJtUlZWRzF3YTAxVk1UTlphMVpUWVZVd2VHTkZXbGRXYlUweFZYcEdSbVZHU25WVGJVWk9Wak5STVZkc1ZtdGlNa1p5VFVoa1RsWjZWbUZaVkVwVFpXeHNXR1ZJWkZoU1ZGWmFXVEJrUjFZeVJuUmxTRnBZVmtWS2RsVlVTazVsVmtwellVWldhVll5YUhsV1YzQkxUa1V4YzJKSVVtbFNWVFZ3VldwR1lWTnNXbGhOVkZKb1ZqQndXRlV5Y0dGV1JscFlZVVZTV2xaV2NETlZNR1JTWlZad1NHVkhlRmRXVjNjeFZtcEdZV0l4VG5OaU0yUnFVbGRTVVZac1ZuZFdiRlp6WVVjNVZsWnNjSGhWVjNoclZURmFkRnBFVWxkU00xSm9WbTB4UzFJeVRrWmFSbVJYVFRKTmVGWlhlR0ZVTVZweldraE9WbUV6UWxSVmExWkxaRlphUjFac1RteGlSemsxVmxjMVUxVXlTblJsUlhSV1ZrVmFURmxzV2xkV01WcHhWV3hXVjJKRldUQldNblJYV1ZaVmVGTnVSbWxTV0ZKWVZteGFjazFXVm5OWGF6bFhZa2RTZWxaWGRIZFZNVXBHVTI1V1YxSnNXbFJhVjNoMlpWWldkVlZzVG1saVdHaE1WbFpTUjFNeVNsZFhhMXBYWW1zMVZGVnRkSGRXTVZKelYyeE9WazFXY0hoWmExcExWbXhhYzJOR1VsWk5WbFV4Vkd4YVIyUkZNVmhrUm1Sc1lrWndORll5ZEZkaE1rMTVWVzVTVkdKclNsTlpiRnAzVjJ4U1dHTjZSazVpUjNnd1ZHeFZOVlJzU1hkT1ZFWlhZbFJHTTFsVVJrWmxWbkJKVTJ4b1UxSllRbEZYVm1SNlRVZFdWMVJ1VW1wU1ZHeFVWRlprTUU1R1drVlJiRTVZWVhwV1dGa3dWbGRXUm1SSlVXeENWMkV4V2t4WmVrWlRaRWRPU0U5WGFGZGlXR2QzVm10amVHUXhaSFJTYmxKcVRUSjRWbFpyVm5kU01WSldWbGhvVjFadE9UWlpWVnBIVm1zeGMxTnFXbGhXYkhCeVZrUktTMU5HVG5WV2JGWnBWMGRvVDFkWGVHRlRNa2w0WTBWYVZXSllRbkZVVldRMFVsWmFXRTFYUmxWTlZXd3pWbTF3WVZaWFJYbFZiRTVWVmpOb2VWcFdXbGRXVmxKeVQxZHNWMkpyU2pWV2ExcFhWVEZLZEZaclpHaE5NbmhaVmpCa1UxbFdiSE5YYkZwT1VtMVNXVmt3VlRWaFZrcDBaSHBLVmxadGFETlhWbHBoVWpKT1NWUnNhR2hOVlhCNFZrUkdhMVV4VGxkVWJrWlRZbFZhVjFSVVNsTmtWbFY1WkVad1QxSlVRak5VVm1oSFZXeGtTRlZzUWxwV00yaE1XVEo0VTJSRk1WWk9WVFZYVmtaYVYxWnRNSGhPUm14WFYydGthbEo2YkZaWmJUVkRWRVpzYzFaVVJtcFdNSEJKV1RCVk5WVXdNVWhrTTNCWFVqTlNWRll5YzNoamF6VlpVbXhhYVZZeWFGQldiWFJUVW0xUmVHRXpiRTlXYlZKd1ZXeG9iMUpXVmxkYVJFSllWakZhTUZaWE1EVlhSbHB6VTI1S1dsWnNWalJWTUZwUFYxWndTRkpzVGxOaWEwbzJWbXRhWVdFeFZuSk5WbHBRVm0xb1dGbHNaRzlWUmxKWVpFaEtiR0pIVWxsWk1HUkhZVlphVlZKdWFGWk5Wa3BZVjFaYVMxSXlSWHBpUm1ocFYwVktTRmRyVWtkUk1XUlhWbTVXYVZJelVsaFVWbHBoVG14VmVGWnJPVlpOV0VKNVZERldWMkZGTUhwUmF6bGFWbnBGTUZwRldsTmtSMDVKVTJzMVYxWkdXWGRXVkVadllqRlJlVkp1VGxoaVZHeFpWbXBPUTFVeGNGZFhiazVyVW14S01Ga3daRWRWTVVweVYxaHdWMDF1VWxSV01qRlNaVWRPUm1GR1dsaFNNVXBSVm0xMFlWWnJOVmRhU0ZKT1ZsZFNjVlJYYzNoT1ZscHpZVVZPVkdKRk5VcFdSekF4VmtkRmVXRkdVbHBoYTNCSVZqRmFVMWRXVm5OU2JXeFRVak5vTkZZeFdsZGhNVmw1VW01U1UxZEhhRkZXTUdoRFlVWmFjVkZVUW14U2JYUTFWRlphWVdGVk1VbFZiRnBhWld0d2NsVjZSazlTTVU1MVYyeHdWMkpYYUZCWGExWmhVVEpOZDA5V1drNVdiRXBZVm14U1YxTkdXbkphUkZKVlRWVndlbGRxVG05VmJVVjNZMFpvVm1KSFVuSlpiWGhYVWpGU2NsTnRhRTVXTWxFeFZtdGplR1F4VVhkTldFcHFVMFZhVmxsVVNsTlpWbEpYVmxSV1UxWnRVbFpXYlRGSFZURktXR1I2U2xkU00yaFVWVlJLUzFKck5WbFNiV2hUVFc1b2FGZFhlRlpOVjA1WFdrWm9hbE5GY0U5WldIQkRUbFpXYzFWclRsVmlSbkJKVjJ0U1UxWlZNSGxsUlU1YVZrVndWRlV3WkVkVFZrWjBZMGQ0VjFKVldqVldNVnBoWVdzeFdGUnJhRlpoTVVwb1ZGYzFVMWRzY0ZobFJYUnBUVlpLV2xrd1drOWhSVEZGVm1wQ1YxSjZSWGRXUkVwWFl6Sk9TVlZzYUdoTlZYQkVWMnhXVm1WR1pFZFZibEpPVmxSV1ZGUlZhRU5sYkZwRlVXMTBWR0pXV25wWk1GcHZWbFprU0ZWck9WVldNMmhYV2xaYWEyTXhjRWRUYXpWT1UwZG9SbFpXV210TlJtUllWbTVTVldGc1dsWldiRnBMVVRGU1dHTjZSbFJTYkZwV1ZUSjRkMkpIU2tkV2FsSlhVak5vY2xacVNrdFNhelZaVld4T1YxSlVWbEJYVjNoaFkyMVdWMVZZYUdGU1ZGWlBWVzB4TkdWR1ZsZFZhMDVWVFd0YWVsbFVUbk5XVjBWNVZXdGtZVlpXV1RCVmExcEhWMGRTUjJKSGVHbFdhM0F5Vm1wR1lWVXlSWGxTYkZwT1ZsZG9WVll3WkZOaFJsWnlWMjVrYWsxV1NsaFhhMXBMVkd4YVZXSkdiRmRpVkVaMlZrUkJlR050UlhwalJtaFhUVEJLYjFkWGVGWmxSMDVYVkd4V1YySlZXbFJWYlRFd1RsWlplVTFZWkZOaVZrWXpXbFZXVTFWc1dYcFZiSEJoVm5wR2NWUldXbE5YVjA1R1kwVTVWMkpyU2pSV2FrWlRWakZSZUZkclpHcFRSVXBXVm0xNFMxbFdVbGRYYms1WVVtczFWbFZYY3pGaFZscFpVVzVvVjAxV1NreFdWM040VW1zeFZtRkdXbGRTV0VKUVZsZHdSMU15VG5OVmJGcFdZa1p3VDFac2FGTldiR3cyVTIxMGFGSnNiRFJaYTJoaFZrZEZlV0ZHVWxwaGEzQklWakZhVTFkV1ZuTlNiV3hUWWtoQ1YxWnNaRFJYYXpWWFYydGtWR0pIVWxWWmEyUlRWa1phZEdSSVRtdE5WVFZYV1ZWb2QxbFZNVWxSYTNCWFZucEJNVmxWV210U2F6RlZVV3hhVTAweVRYaFdhMlEwVWpGYWMxVnNhR0ZTYTFwWFZGVldZV1ZXWkhKV2JYUnBUV3MxU1ZaSGNGZFViRVY2Vld4d1ZWWjZSbFJaZWtaM1VteGtWVlp0ZEZOaVdHaGFWbXRqZUZsV1pITlhXR2hVWW10d1lWUlhjRWRYUm5CWVRWVTVUMVp0T1RaVlYzaERZa1phVm1GNlJsWk5WbHAxV2tSR2RtVkhUa2xXYkdScFlrWndhRlpHVWtkVE1sRjRZa2hHVkZaRlNtaFVWM040VGxaYWRHTkZUbGhXVkVJelZHeG9UMWRyTVhGV2JXaGFZVEpTVUZsNlFUVldWazV6WTBab1UxZEZSWGxXV0hCRFZERlZlR05JU2s5V1YyaFZXV3hTUjFWR1VsaGtSbVJQWWtaR00xWlhlR3RoVmxwMFpVUkNWMDFxUm5wWFZscGhVbXhPZFZWc2FGZE5NRW94VmtaU1IyTXhaRWRYYkd4cVVtdEtWRlJWV25ka01WcEhWMjEwVldGNlJucFphMXB2Vm14a1NHRkhSbHBXTTFKSVdrUkdUMVp0UmtsalIwWk9VMFZLUzFac1kzZE9WMFpIV2tWYVRsWkZTbGRWYWs1cVRWWnNXRTFWWkZSU2JIQXdXVEJrYjFSc1draGtla3BYVFc1b2NsWkVRWGhYUmxKMVZXeGtWMlZ0ZUU1V2JYUnZWREpLYzFSdVNtaFNhelZ3VkZkMFlWZHNXa2RoUms1V1ZqQndSbGxyV2xkV2JVcEhZMFY0VjJGcldreFdha1pQWkVaa2MxcEhhRTVTYmtKV1ZtMTRiMk14Um5KUFZscHBVbFpLVjFsc1duZFZSbFp4VVc1a2ExSnNTbmhWTW5SaFlrZEdObUpGV2xkaVZFSTBWakl4UzFZeVRrbFJiR2hwVW10d1JWZFhlR0ZqTWs1WFkwUmFWV0pJUWxoVVZscGFUV3hhUlZGdGRGTk5hMXBYVkZaYWIxWldXa1pqUjBaWFlXdGFTRlJyV210WFIwNUdVMnM1VGxJemFFWldiR1IzVVRKR1IxTlliR3hTUm5CV1ZXMTRSbVZHWkhSbFJUbFhUVlZhZWxaWGRIZFZNVXBHVTI1V1ZrMXVVblpXVkVwS1pWWktjMkpHVmxoU2EzQlRWMWQwVTJNeVVsZGFTRTVvVW1zMWFGbHNWbUZYYkZaWVRWZEdXR0pHYkRSVk1qVkxWMnN4Y1ZKc2FHRldla1pRVkd4YWRtVnNSbk5SYlhoWFZsWndOVll5ZEZkaE1rbDVWR3RvVldGc1drOVZWRTVUVjJ4U1YxWlVSbE5OVm5CWldsVmtSMVV5U2tkWGJuQlZUVlphTTFac1pFWmxSMDVIVW14U1YxWnJXWHBXTW5CRFpERk9WMVp1VWxCV01taFpWV3hTUm1ReFdsWmFSRTVQVmpCd2Vsa3dXbk5XYlVwWFkwaEdWVll6YUdoVWJGcDNVMFV4VjFwSGVGZGlWMUV4VjFkMGIxWXhiRmhUYkZab1UwWndWVlJXV2t0T2JHUnhVMjFHVjFKcldqQlVWbVF3VmpKV2MxZHVhRmhoTVZweVdYcEtVMlJHVG5WUmJFcHBWbTVDYjFaR1pEUlhiVkY0V2tWV1ZGWkdXbk5aYTJSclRteFplVTFYT1doaVZWcFpWMnRvUzFkR1RrbFJiV2hhWWtaVmVGVnNXa3RXVmtwMFVteE9UbE5GU2pWV2FrWlRVekZWZVZKWVpFOVhSVnBWV1d4U1IyRkdXbkZTYmtwc1ZteEtXbGt3YUU5aFJscFZWbXhzVm1KVVJUQldNakZYWXpGYWNWVnNWbWhoTTBKTVZrZDBWbVZHV2xoU2EyaHFVbFJHVTFSVlZtRmxWbGwzWVVoa1ZVMXJXbmxVYkZaWFlVWkplV0ZIUmxkaE1WVjRXWHBHYTFkSFRrWlViV2hwVWpOb1dsWnNXbE5STVZaSFYydGtWMVpGV2xsV2ExWjNZVVpzVlZGWWFGZFdNSEJKV1d0Vk5XSkhTbGhVYWxwWFVucFdNMVZ0TVZkV01rcEpWV3hrV0ZJeWFFNVdiRkpEVTJzd2VGUnNXbFZpUlRWb1dWaHdWMDFHV1hoVmEwNVZZa1p3U0ZZeU5VdFhSbG8yVW14U1dsWXphRE5WTUZwWFZsWk9jazVYYkZkaWEwbzJWbXBKZUdReFpIUldia3BRVm0xb1ZWWnJWbUZaVmxweFVtMUdhbFpzU25wV1YzUmhWR3N4V0dWSWFGaGhhelYyVmxWYVNtUXdNVmhPVmxwVFlYcFdSVmRzWTNoVk1VNVhWRzVHVW1KWGVFOVpiVEZ1WlZaa2NsVnJkRmROYkZwWFdrVldVMVp0U2xkalJrSmFZa1p3ZVZwRVJsTldNVlp6V2tkb1RsWXpaM2RXYkdONFpERnNWMU5ZYUZOWFIzaFdWbTV3UjJGR2JISlhibVJxVm0xU1dsa3dXa05XTURGSVpFUlNWMDFXY0hKV2FrcEhZMnMxVjFac1RsZFNWRlpvVjFaamVHRXdOVWRWV0dSaFVsUldjVlZzVW5KTlZsWllUbGhrYUUxRVJqQmFSRTVyVjBaYVJtTklWbHBoYTBvelZXcEJOVk5YVGtkalIzaHBVbFpXTTFacVJtRmhNVXAwVm01T2FsSnRhRlZXTUdSVFdWWlNXR1JIUm1waVJrcDVWbGMxUzFSc1dsVmlSbXhYVW5wQ05GZFdXa3RTYkZwVlVteG9WMDB3U25oV1IzUldUVlUxYzJFemNHaFNWRlp3Vm14b1EyVnNXa2RYYXpscVlrYzVOVlp0Y0ZkVmJVcFpVVzFHVjAxR1ZYaFpla1pQVm14U2RHUkhiRmROUkZWM1ZtMHdlRTVHWkhSVGJrcFBWMFZ3VlZsdE1UUlJNVkowWkVoT1ZGSnNTakJaVldSM1ZHMUtSMWR1VmxaTmJrSkxWRlprUzFOR1ZuSmhSbEpwWW10S2IxWldVa3RVTWtwelZWaHNhVkpWTlc5WmEyUTBWMnhhU0UxVVVsUmlSVlkxVmxkd1lWZHRSbkppZWtKYVZsZFNVRnBGWkV0VFYwNUdaRWQ0VjFaV1ZqVldWRVpYWVRGUmVWSnJhRlZYUjNoWVZtcEtVMVJHVWxWUlZFSnNVbTE0TUZSVlVsZGlSMFY2VVZSR1ZsWnNTbWhWTW5oS1pEQTFXRTlXY0d4aE0wSllWakp3UTJSdFZsZFdibEpvVWpOQ2NGbHNXa3ROTVdSWVRWaE9hR0pIT1ROVU1XaERWVzFLZFZGdVNsVldla1Y2V2tSR2ExWldUblJPVjJ4T1UwVktTVlpFUWxOVE1XeFlVbTVPVTJGc1NsWlphMlJUVmtac1YxZHVaRlJTYkVvd1drVmtSMVV4U25Sa2VrWlhUV3BDTkZacVNrdFdhelZaVW14V1YxSnNjR2hYVm1RMFdWZEplRnBJVG1GU1ZGWlBWbXhTUjFac1pISmFTRTVXVW10d1IxWnNVa05YUm1SSVpVaHNXR0ZyY0ZoVWJGcEhaRWRPUjJOR2FGTldSbG8yVmxSR1YxUXlSWGxTYmxKVVYwZDRVRlp1Y0VkVVJuQlhWbXRhVG1KRk5WZFdSM2hQV1ZkR05sWnFRbGRTYkVwTVZrUkJlR014WkhWVmJGWm9UVlZ3YjFkWGRHRmpNV1JIV2tac2FGSXdXbFJWYlhSV1pVWmFSMVp0ZEZaaGVrSTBXVEJvUjFaSFNsbFZiVVphWWtad1NGUnNXbE5XVms1eVQxZHNWMVpGVlhsV2FrbDNaVVpSZUZkclpHbFNlbFpYVlcxek1WRXhiSFJrUkU1c1lrWktNRmxyWkc5V01sWnpVMWhzV0Zac2NISlhWbVJIWkVaT1dXSkZPVmRsYTFwMlZtMXdTMVF5VWxkVldIQnBVbFUxYjFacVFURk5SbHAwVFZjNWFGSXhXakZXUnpBeFYwWmFSbU5GYUdGV00yZ3pWbXRhUjFkRk5WaGlSbVJPVW01Q05GWlVTVEZqTVVaeVRsaEthVkpXU2xkWmJGcDNWVVpzYzFaWVpHeFdiRXA0VlRKNGEyRldXbFZXYTFwWFRXcEZNRll5ZUZwbFIwcEZWV3hvYUUxVmNGUldSM2hXWlVaT1IxWnNWbFZpVlZwdldWUk9RMlZXV1hoWk0yaFdZbFphVjFSVmFITldWMHBWVW1zNVlWWXphRE5hUlZwVFl6RldjMk5IUms1V1ZYQldWbFphYWsxV2JGZGFSV1JVWW14d1dWbHJaRzlUTVd4MFkzcFdUMVpyV2pCWmEyUjNZVlphYzJOSVdsaFdiV2d6V2xkNGRtVkhSWHBpUms1cFltdEtiMVpzVWtOU01sSlhZa1prYUZKVmNIQlpWRW8wVW14c2NWTnRkRlJOVlhCNFYycE9jMWRHWkVsUmJVWlZWa1ZhTTFZd1dtdFdWa1p5VDFkc1YySklRakpXYWtsNFpERkplVkpZWkU5V1ZscHZWRlJLVTJGR1ZuSmFSazVyVW14S1dWUldXazloUmxwMVVXdGFWazFYYUROV01uTjRZekpLUlZkc1ZtbFdSVnBvVmtaYVZrMVhUa2RTYkZacFVsaENVMVJYZUV0Tk1XUllUVWhvVjAxRVJrZFphMVpUVjIxV2RGVnJkRlpoYTBvelZHeGFhMk14Y0VaYVIzQm9aVzF6ZUZaV1pIZGpNVTV6VTFoa2FsSkdXbGxaYTJSVFUwWnJlV042Vms5V2Exb3dXVEJhZDFkR1NsVldibkJXVFZaYVVGbFVTazVsVmtwellVVTVWMUpXY0hwV1ZsSkxWREpLYzFWWWJHbFNWVFZ6V1d4YVIwNVdiSEpWYTA1WVlYcEdNRmRyYUdGV1IwVjRZWHBDVlZZemFETlpNVnBYVjFkR1JrOVdaRTVXV0VJelZtcEtNR0V4VVhsU1dHaHFVbFphV1ZZd1pEUmhSbXh6VjIxR2ExSnNTakJaTUZVeFZERmFkR1ZJYUZkaVZFWjJWMVphV21Rd01VbGhSbFpYWWtWd2VWZFdXbFpPVmtwWFUyeFdWbUpJUW5OV2FrNVRaRlprYzJGSVRsSk5hMXA2V1d0YWMxWlhTbGxoUlhSV1ZrVndWRmt4V25OalZrNVZVbTFzVjFkRlJYaFdWbHBUV1ZaT2MxSllhRlJpVkVaV1dXeFNSMVF4VWxoamVrSnNWbXh3TUZSV1ZUVlZNVXAxVVc1d1YwMVdjSEpXTWpGWFVqSk9SbFpzV2xkU2JIQlFWbGR3UjFKdFZuTmFTRkpxVWxoU2IxUldaRFJOUmxwWFlVaE9WV0Y2Um5sVWJHaFRWbFprU1ZGdGFGcGlSbFY0Vm14YWExZEdjRWRTYkZwT1VsWnZlRlpyVmxOVU1WRjVVbXhvVTJKSGFGQlZNRnAzWWpGYWNWSnVaR3BXYlhoNFZURlNSMkZXV1hkWGJHeFlWa1ZyZUZaVlpGZFdiRTUxVVd4d1RtRnJXbGxYVmxaclVqQTFkRlJZYkdGU2JrSlBXVlJHZGsxc1dYbGxSVGxTWWxWd01GVXllRzlWTWtwWlVXdDRZVlpzV2tkVVYzaFBWbXhTYzFSdFJtaGxiRmwzVm10YVUxTXhVWGROV0U1WVlteEtWbGxVUmt0aFJteHlWMjVPV0ZKdFVscFpWV1JIVlRGS2NsWllhRmRTYkZweVZsZHpkMlZIVGtsU2JGSnBWMFpLYUZkWGVHRlNNRFZYVld4V1ZHRjZiSEJXYkZKR1RXeFplVTFJYUZWTlZuQklXV3RqTVZac1NuSk9WVTVhWWxob1VGVnFSbmRUUjBaSVVteE9UbFpYT0hoV1ZFa3haREpXYzJJemFHbFRSbHBWV1d4b2IxbFdXbkZVYXpWT1RWVTFWMWRyVlRWaFJrbDNUVlJXVjJKSFVuSlZla0Y0WkVkV1JWUnNVbWxpV0doRVZrY3hNR014U2tkV2JsSllZWHBzY0Zac1VrTk9WbHBJWTBWMFYwMXJjRmRVYkZaWFYwZEtXV0ZIUmxkaGExcDZWR3RhYTJOc1ZuTlRhemxYVmtWYVNsWnNXbE5VTVd4WVVtNUthbE5GY0ZsV2JuQkhWVEZ3VjFaWVpHeFdiRW93VkZaVk1XSkhTa2xSYWtKWFVqTm9WRll5ZUhabFJrWnpWV3hLVjJWc1duWldiVFYzVmpKTmVHTkZXbFZoTURWdlZXMDFRMU5XV2xoT1dFNVdVakJhV1ZaR1VrOVdSbHBZVld0NFlWWnNjRE5XTUZwTFpGWk9jMUZ0ZUZkV1YzTjRWbFJHVjJFeFRYbFdiR1JxVW0xb1ZGbHRkSGRWVm5CWFZtdHdUMVpyTlZkWlZWWXdZVlpKZUZOcmNGZGlWRlo2V1Zaa1IxWnNTblZUYkdoVVUwVktiMWRXWkhwTlYwNVhZMFZvYkZJd1dtOVphMVpYVGxaWmVXVkhkRk5OYTNCWFZGWmFiMVpzV2taVGJFWlhZVEZhVEZreWVGTmpWazV6WTBkNFYySnJTa3BXVkVsNFRVWlNkRkp1U2s5WFJWcFpXV3hvUTFReFVsaGxTR1JxVm14d1ZsVXllRU5pUmxwV1lYcEdWazFXV25KWFZsVjRWMFpPZFZWc1ZtaGhNSEIyVm0wMWQyTXdNVmRVYkZwWVZrWmFjRmxyYUVOWGJGcFlUVmRHV0dGNlJuaFphMUpIVjBkS1ZWSnVjRnBpV0ZGM1ZXdGtSbVZXY0VobFIzaFhWbFp3TlZZeWRGZGhNa2w1Vkd0b1ZXRnNXazlWVkU1VFYyeFNXR042Um10aVIxSjZWMnRWTldGdFNraGFSRnBYVW5wRk1GWXljM2RsUm1SeFZteG9hVkpVVmpGWFZFSldUbFUxVjFKdVZsSmlWVnB2Vm1wS2IwMHhaRmhOU0docVRWaENlbGxxVG5OV01rWnlVMnN4VmxaRmNGUlViWGhyVmpGd1NGSnRiRk5pVjFFeFZrWmFiMWxXYkZkVFdHaFhZbXhhVlZSV1ZURmxWbVJ4VTJ4a1QxWnJXakZaYTJSSFYwWktjbUpFVWxoV1JXd3pWRlZhZG1ReVNYcGhSbFpvVFVoQ1ZWZFdVa2RaVjBwWFYydGtWMVpHV2xSV2JYUjNWbFprV1dOSGRGUmlSVFZHVlZjd01WWkhSWGhoZWtKaFZqTm9lbFJ0ZUZkV1ZsWnpZMFprVGxKc2EzbFdha28wWVRGT2RGVllhR2hOTW5oVVdXeG9VMVZHVm5KYVNIQnNVbXhHTkZkclZUVmhWbHAxVVd0YVZtSkdTbGhXTWpGSFpFWlNWVkZzVm1saWEwcDRWMnhXVm1WSFVrZFVibEpzVWxSV1YxUlZWbFpOVmxWNFZtMDVWVTFFUmtsV1J6VlhWbTFLYzJOSVFsWmlia0o1V2xkNGEyTXlSa1pqUjJ4T1ZteHdTRmRXVm1GU01XUldUVlZXYVZKc1dsVlVWbHBMVG14a2NWTnJaRmhTYlZKWlZERmtkMVJyTVZkalNHUllWMGhDVUZaVVNsZFdiVkpHVld4YWFWWnVRbEJXUm1SNlpESlJlRlZZWkdGU1YxSnZWV3hTUTA1V1duUk5XRTVWWWtWc00xUnNZelZYUjBWNFUyeE9WV0pHVlhoV2JHUkxVMGRPU0ZKdGJGZGhNV3QzVm10U1IyRXhUbkpOU0dSUVZsWmFZVnBYY3pGVU1WcHlWbTVrYWxKdFVucFdWM1JoWVdzeFNHVkZXbFpXYldoUVZUSjRTMUpyTVZsYVJscFRZa1ZaZWxkWE1IaFZiVlpZVTJ0c1YyRXpVbk5XYWs1VFpGWmtjMkZJVGxKTlZWcFlXVEJhYzJGR1NYcGhSMFpoVm0xU2NscEdXbk5XTWtaR1ZHMW9hVlpYZHpGV1IzaHFaVWRHUjFkWWJGVmhhM0JaVm0weFVrMUdiRFpSYm1SUFZqRkdOVmRyVmpCVk1rWjBXa1JTVjAxcVJqTlpWRXBMVmpKS1NWVnNUbGhTTW1oUVYxZDRZVkl3TlhOVmJsWnFVMFZ3YzFWdE5VTlNiRlY0WVVkMFZVMXJjRmhaTUdNMVYwWmFkRlZzUWxwaVJuQXpXVEZhUzFkV2NFZGpSbVJPVjBWS01sWnJaREJWTVZWNVUydGthbEpzU205YVZ6RlRVekZXY1ZOcVVtdFNhekV6VjJ0Vk5XRXlTbGRUYkd4VllrWktSRlpGV2tabFJrNTBUVlpXYVZJeFNtaFdSbEpIWkRKU1IxUnVVbWhTVkZaWVZXeG9RMlZXV2tkaFNHUm9ZWHBXVjFSV1dtOVdiR1JJWlVVNVZtRXhjRE5hUlZwclZqRndSbHBIYUdsVFJVbDNWbXBHYjJJeFVuTlRXR1JZWW14S1dWWnRlRXRWTVZKV1YyNWtXRkpzY0ZwVlYzUjNWVEZLUmxKVVJsWk5WbHBVVlZjeFQxSnRTa1ppUmxKcFYwZG9lVlpVUW1GWlZUVlhZa2hTYVZKVmNIQlphMVozVjBaVmVXVkZPVmRXVkVaWFdUQmplRll4U2taWGExSldZbGhvVkZrd1duTk9iSEJHWTBaS1RsWllRakJXYTJONFpERkZlVkp1U2s1VFIzaFpXV3hTUjFWR1ZuSmFSazVxVFZaS1YxWlhOVTloUmxwMVVXeGFXbGRJUWxCWFZscGhVbTFGZWxwR1ZsZE5NRXA0VjJ4YVlXTXlVa2RYYkd4cFVqQmFWRlZxU2s5T1JscEhWMjEwVlUxclZqTlVhMmh6VmpGWmVWVnNTbGRXUlVwTVdrUkdjMk15UmtaVWJYQk9ZVEozTVZac1kzaE9SbEpIVWxob1ZGZEhVbUZXYkdSVFpXeHdXR1JFVWxkV1ZGWlpWako0VjFVeFdYcGhSa1pYVmpOb1dGVjZSbFpsUms1elYyeE9hRTB5YUU5V1ZsSkRVakpPYzFwRmJHcFNiVkp3Vm14U1UwNVdXWGxOV0U1WVlrWndSMVp0Y0ZkWFIwVjRVMnM1VlZaRlJURldiRnBMWkVkU1JrNVhhR2hOUmxreFZtcEpkMlZHU1hsU2EyUm9UVEo0V1Zsc1VrZFVNVnB5Vm10MGFVMVhVakJVVmxaaFZHeEtWVlpyYkZkaVZFVXdWa1ZhWVZOV1VuUk9WMFpwVWxSV1JWZFhkR3RUTVU1WFZXNVNiRkpZUWxWVk1GVXhaRlpWZVdSR2NFOVNNVnBIVkZaYVYxWlhTbGhsUmtKWFlURndhRmw2Um10ak1YQkdWMjEwVGxKSGVGZFdhMk40WXpGa2MxZHJXbGRXUlVwV1dWZDBkMVl4Y0VWU2JtUlVVbXMxTUZsVldrTldNVXBYVjFod1YxSnNjSEpXYlhNeFZqSk9TVkpzWkZkU2EzQlNWbXhTUTFKck5WZFViRnBWWWtVMVQxVnFRbUZUVm14eVlVaGtWVlpzY0VaV2JUQjRWMGRHY21OR2FGVldWbkIxV2xaVk5WZFhUa2RpUlRWT1YwVktNbFl4VWt0ak1rcDBVMjVPYUUweWVGRldNRnBoWVVac1YxcEZPV3hpUlRWWFZrZDRUMWxYUmpaUmFsWlhVbXhLUkZaVldrcGtNV1IwVDFaV1YxSllRbGxYVmxwV1pVWk9SMVZ1VW1oU01GcFVWVzEwVm1WR1draGxSazVxVFd0YWVsa3dhRk5XYkdSSVlVWkdWMkZyU25sYVYzaFNaREZXZEdORk5VNVNSVnBYVmxSSmVHTXhiRmRYYTFwWFltMVNWbFJVU2pSUk1XeFZVbTA1VDJKRldsWlZiVEZIVmpGS1dWRnFRbGRTTTJoeVZrUktTMUpyTVZsU2JFcHBWak5vYUZkc1pEQmtNazE0V2toU2FsSnJjRkJXYkZKSFZteGFjMVZzVGxoaGVrWjZWakkxUzFaVk1VZFRhMUphWWtaVmVGcEZXazlXVmxKeVQxZDRhVmRIYURaV1ZFWlhWVzFSZUdJemFGTmhNbmhUV1cxNGQyTldWbkZTYlVaT1Ztc3hNMVpIZUU5WlYwWTJVbXhhVm1KSGFETldNakZIWXpGYVdXRkdhR2xTTVVwWlYxWldWbVZHU2xoU1dIQnFVbTVDY0Zac1dscE5SbHBGVVd4T2FFMXJjRWRVVmxadlZtMUtXR1ZIUmxkaE1sRjNWR3RhVTFac1ZuSmFSMnhUVmtkNFdsWnFSbE5TTVZaSFUydG9hMU5JUWxWV2JGVXhWRVp3VjFkdVRtcFNhelZhVlZkNFEySkdXbFpqUkU1WFRXcEdlbFZYTVVwa01rcEhWV3hhYVZadVFsQldWM1JoV1ZkTmVGVnNhRTVXYmtKUFZtMHhNRTVXV25OaFNFNVZZa1ZzTTFrd2FFZFdWbG8yVW14b1dtSkdWWGhWYkdSR1pXMUdSazlXWkZOTmJXZzBWbXBLTkdFeFZuSk9WVnBPVmxkb1dWWnJWbmRaVm14WVRWVTFiR0pHUmpSWGExcGhZV3hLV0dWRmNGWk5ha1V3V1ZSR1QxSXhaSEZXYkhCcFZqTm9SRmRYTVRSVE1WbDRWRzVPVldKR1drOVdiR2hEWkVaYWNsVnJaRkpOVlhCNlZsYzFRMWR0Vm5SVmEzUldWa1ZhVEZsc1dsTmtSMDVHVkcxb2FHVnJTVEZXYWtsM1pVWlJlRk5yYUZaaWF6VldWbXhhUzJWc2JGZFhibVJYVmpCWk1sWkhNVWRXTVVwWVpFUk9WMUp0VWpOWlZ6RlhWakpLU1ZWc1pGaFNNMmh2VmxkMGEyRnRWa2RWYkdSaFVsUnNiMVJWVWxOT1ZscHpXa2QwVmxac1ZqTlZNblJMVjBkS1ZWWnJlRnBoTVhCNlZqQmFWMWRGT1Zaa1JrNW9ZbGRrTmxaclpEUmhNVnAwVm14a2FsTkZXbGhaYkdoRFlVWmFjbFp1VGs1TlYxSlpWRlpWTVdKR1duVlJiR3hYVFZaS1JGWlZXbUZTYkZwWllVWldUbEl4U2xGWFYzUmhaREZLVjJJemNHRlNNRnB2V1d0b1EyUXhXa2hPV0dSb1lYcFdXRmt3V2xOaE1ERjBWV3hDVm1FeFdrZFVWbHBUWkVkS1NWTnJPVTVTTTJoSVZsWmpNV0V4WkhKTldGWm9Va1Z3WVZwWGRIZFdNV3h4VVc1a1UwMUViRXBYYTFVMVZqQXhWMWRVUmxkTmFrWXpWbXBLUjJNeVRrZFdiRkpZVWpGS2FGZFhlRlpsUlRWWFdraE9ZVkp1UWs5VmJGSnpWbXhXYzFWclpGWlNhMnd6Vkd4b1QxZEhSWGhUYmxaaFVrVmFNMWt4V210a1IwcEdUMWQ0YVZaVVFqUldha28wVkRKT2NrNUlaR2xTVjNoUFZXcEtVMk5XYkhOWGJIQnJUVmhDU0ZsVlZqQmhNVnBZWlVWV1YxWjZSbWhXUkVwSFkyeE9kVkpzVmxkU1dFSnZWMWQ0VmsxV1NsZGpSV2hzVWxSV1ZGVnFUbTlrTVZsNVpVWk9hbUY2UWpSWk1GcFhWa1phUmxOck9WcFdla1pRVkd4YWExZEZNVmRYYlhoWFltdEtSMVl5TlhkU01WSnpWMWhrVDFkRmNGWlpWM1IzVmpGU2NWRnVUbFJXVkVaSlYydGtSMkZYU2tkaU0yaFhUVlpLVUZaVVNrOVRSazVaWWtVNVUwMXNTbUZXUm1ONFZUSk5lR05GV2xoV1JscHhWV3BCTVZOR1VYaGFSemxhVm10c05GVXljRmRYUjBwSVlVWkNZVll6VVhkVmEyUkdaVlp3U0dWSGVGZFdWbkExVm1wQ1UxTXhaSFJXYTFwUFZsWmFXVll3WkRSVlZscHhVVzFHYWxKdFVqQlpNR1JIWVVaS1ZWSnNXbGROVmtwUVYxWmFXbVF5U2tWV2JGWm9UV3hLV0ZkclVrZGtNVXBYVTI1U2JGSlVWazlaYTFwV1pVWmFSMVp0ZEZkaVZscEhWRlpvVTFaR1pFaFZhM1JXWVRGS1JGbHRlR3RXTWtaR1pFZDRWMkpZYUdGWFZsSktUbFpTUjFkcmJGVmlWRlpWV1ZSR2NrMUdVbGhqTTJoVVVteEtXbGt3WkVkaFZscDBaRVJPVjFJelFreFdiVEZTWkRBNVYyRkdVbWxYUjJoU1ZtMTBhMVV5VFhoVmJHaHFVbXR3YzFac1VsWk5iRlY1VFZoT1dsWnNjRWRaTUdoTFZsVXhSMU5zWkdGV1ZuQjVXbFphVjFaV1VuUlNiRnBPVWxaVmVGWlVSbGRVTVZWM1RWVm9VMkV5YUhCVk1HaERWR3hhY2xWc1pHbFdiVko0VlRKNGExUnNTblJhUkZaWFVucFdhRmxXWkV0V01rNUpXa1pvYVdKWWFERlhWRUpXVGxVMVYxSnVWbEppVlZwdlZtcEtVMlZXV1hkaFNHUllZbFpHTkZsclVtRldWMHBWVW0xb1dsWXphRWRhVjNocll6RldjbE5yT1ZkaVdHZDNWbTE0VTFZeFVYZE5XRTVYWVd4YVZsbFVSa3RUTVZKVlVWaG9hMUpyTlRCYVZWVXhZVlphY2xaWVpGZFNNMmhVVldwS1IyTXlUa1pXYlVaVFRUSm9URlpXVWtOV2F6VlhWR3hhVldKWVVsaFZiWFJoVmpGWmVXUkhSbGhXVkVaR1ZXMTRSMVp0UlhoWGJHUmFZbGhTZWxWcldtdFhSVEZXWTBaS1RsWllRakJXYTJONFpERkZlVkp1U2s1VFIzaFpXV3hTUjFWR1ZuSmFSazVxVFZaS1YxWlhOVTloUmxwMVVXeGFXbGRJUWxCWFZscGhVbTFGZWxwR1ZsZE5NRXA0VjJ4YVlXTXlVa2RYYkd4cFVqQmFWRlZxU2s5T1JscEhWMjEwVlUxclZqTlVhMmh6VmpGWmVWVnJkRmRoTVVwRVdXMTRUMk5XUm5OYVJscE9WbXh3TlZaRVJtRlVNV1JXVFZWV2FWSnJjRmRaYTFwV1pERnNkR1JFUWxkU2ExcDRWMnRXZDFWck1WWmpTRkpYVW14S1RGWkhjM2hTYXpsV1lVWk9hVll5YUZCV1JtUTBXVmRPUjFWc1dtRlNWR3h2VlcwMVExSnNXbGRWYkdSVlRWWndTVnBWYUVkWFIwcFZVbXhPWVZaV1ZURldNRnBQVmxaU2MxRnNUbE5OUkVVeVZtdGFZVlV4VFhsU2JHUnFVbXhhVkZacVNsTlZiRnBWVVd0MFQySklRa2RaVlZZd1ZHeEpkMkpFVm1GV1YyaG9XVlJCZUdNeFpIRldiRkpPVW01Q1JWWlVSbUZXTVVsM1QxWmtVbUpHY0hOV2FrNU9aV3hWZUZadGRHcE5hM0JYV2tWV2MxWlhSbkpYYlVaYVlsaE5kMXBFUm5KbFYwcElUbGRvVGxZeVkzbFdhMk40WkRGUmVGTnJhR2hTZW14WlZtMTRTMVZHYkhKWGJrNXFWbXRhTUZrd1duZFdNREZXVm1wT1YxSkZXbFJXYlhNeFZqSkZlbUpHYUdsWFJrcFFWbTEwYTA1SFRrZFZibFpxVW5wV1QxUlZVbFpOYkZaellVaE9XR0pWY0ZoV2JYQlRWbFpLVms1VlRtRlNSVWt3Vld0YVIxZFhUa1psUm1SVFVsVlZlRlpVU25kVU1rVjVWR3RvVkdKclNtRlVWRUpMVXpGVmQyRkZPV2xpU0VKNlZrZDBUMkZXU1hkalJYQlhVbnBGTUZVeWVFOVRWbEowVGxaU2FFMVhjM2RXUmxwaFpESk9WMk5GYUU1V2JrSndWbXhhV2sxR1drZFpNMmhXWWxaYWVWUnNVbUZoUlRCNVlVZG9WbUV4V25wVVZFWlRaRVV4V0ZKdGFGTmlXR2hhVm10amQyVkdiRmhTYmtwWFlXczFXVlp0TVZOaFJteFdWbFJHVTFac1dqQmFWV1JIVm1zeFJsWlVSbFpOVmxweVZtcEJNVk5HVW5KaFIzaFVVbTVDYjFaWGNFZFdNbEp6Vkc1S2FGSnJOWEJVVjNSaFYyeGFSMkZHVGxaV01IQkdXV3RWTVZack1WZFdXR2hXWWxob1NGbDZSazlqYkdSelUyeGtXRkpVVlRKV1ZFWlhWREZWZUdOSVNrOVhSVnBUV1d4b1ExUXhVbGhsU0dSclVteEtlVlpYTVRCaFZrcFZVbXRhV21FeVVucFhWbHBoVTBkTmVtTkdhR2xTYTNCTVZrWldWbVZIVGxkaE0zQnBVbTVDY0ZadGVGcE5WbGw1WkVaT2FXRjZSbGRVVmxwdlZsZEtXVlZzUWxWV00yaFlXa1JHVW1WdFNrWlRiV2hPVmpKamVWWnFSbTlqTVZaSFUxaGtUbFpHU2xsWmExcExZVVpzV0dONlJtdFNiVkphV1d0Vk5XSkhSalpTVkVKWFVtMW9NMVpFU2tkU01rNUdWbXhTV0ZJemFHaFhiR1EwVXpKT1YxVnNXbFppV0ZKdldXdGtNRTVXVm5OVmJHUlZZa1p3U1ZaR2FHdFdSbHBYVW1wT1dHRnJTak5WTVZwWFpFVTVXR0ZHYUZOV1JWWXpWbXhXYTAwd05WaFRiazVxVW0xNFYxbHNXbmRqUmxKVlVWUkdhVlp1UWtsVVZsWnJZa1phV1ZWclZsaGhNbWhFV1ZkNFJtVldVblZqUmxKWFZsUldWVll5TVhwa01sWlhWV3hXVW1KRlNsUlVWVnAzWkd4YVIxVnJkRmROYTFwWFZGWldiMVpYU2xoaFIyaFdZVEZ3UjFSV1dsTmpNVloxVkcxb2FWTkZTWGRXYkZwdllqRldSMWRZWkdoTk0wSldWRlZhUzJOV1VsVlJXR2hYVm1zMU1GbHJaRWRXTVVwWFYycE9WMUpGTlhwVlZ6RkdaVWRHUlZkc1ZsaFRSVXBRVjFaa05HTnRVWGhhU0ZKcVVqTlNjRlp0TVROTmJGcFlUVmM1VlUxRVJucFpNR2hIVjBkS1NGVnNUbUZXVmxWNFZXeGtSMU5GTVZaT1ZrNVRUV3N4TTFacldtcGxSbEp5VGxaa2FsTkZXbTlWYWs1dlZERnNXR042Um1sTlZUVlhWbFpvYTFsVk1VaGxTR1JhVmxkU1VGWXhXa3BsUms1VlZXeGtUazB3U2toWGExWldUbFpaZDAxV2FGVmlSM2hVVkZaV2NrMUdXa2RYYlVaUFVtMTBORmt3Vm10aVJrbDNUbGRvVmsxSGFISlViRnBhWlcxT1JsTnRkRk5XUmxwSlZrWmFhMVF4WkZkVFdHaFVWa1pLVmxacVRrTlhSbVJZWXpOb1UxSlVSa1pWYlhoelZtc3hkVlZ1WkZkU1JUVjZWVlJLUzFkR1RsbGpSbEpwVjBkb2FGWnRjRUpOVjFKelZHeGFWV0pVVm05VVZtUnVUV3hhZEUxSWFGVk5SRVo2V1RCb1ExZEdXbk5UYTJSaFZteHdNMVZzV2xOV1ZsSnpVV3hrVTFadVFqVldhMXByWkRGR2NrMVlUbXBUUmtwVVdXeGtiMWxXVWxobFNHUnJVbXhLV0ZaWGRFOWhSa3AxVVdwQ1ZtSkdTa1JXUkVaS1pVWmtkVlJzVWxkV01VcEpWMnhrTUdNeFNrZFdibEpZWVhwc2MxbHNaRTlPYkZsNVpVWk9WMkY2Um5sVU1WcFhZVlpLTmxKdGFGcGlSbHA2VkZSR2ExZEhUa2hPVlRWVFZrWmFORlpXWTNoTlJtUjBWbTVPYUdWclNsWldibkJIVkRGU1dHVklaRmhTYTNCV1ZWZHpNVll4U1hsVWFrNVhUVmRTTTFsWGN6VldNVVoxVVd4YWFWWnVRbWhYVjNoWFdWZE5lRlZZWkZaaGVteHZXV3RrTkZkV1drZFZiRTVWWVhwR2VWa3dhRTlXVm1SSlVXNVdZVll6VFRGVk1GcHJWbFpLYzJOR1pGTmhNV3Q0Vm10a05HRXhXbkpOV0VwUFYwVmFWVmxzVWtkVlZscHhVbXhhYkdKSFVsWlZNbmgzWVd4S1dHVkZjRnBsYTNCeVdWVmFXbVZIU2tsWGJGSlhZbGRvUlZkc1dtRmtNV1JIWTBWb1dHSlhlRmhVVlZwelRURlplRlZyZEdsaVZXd3pXV3RvUTFWR1dYaFhhM2hXWWxoQ2RsUnRlRk5YVjA1R1kwVTFhR1ZzV2twV2FrWlRWREZzV0ZOc1drNVRSMUpaVm0xNFMyTnNiSE5YYmtwc1ZteHdNRnBGVlRGV01VcHlWbGhrVjAxcVJqTlZWM014VW1zNVZsWnNVbWxYUlVwU1ZtMXdSMk5yTVVkYVNFNVdZVE5DYzFsclpEUlhSbkJXV2tVNVZWWXdXbGhWTWpCNFZsWmtTVkZyT1dGV2JGVjRXVEZhVjJSRk1WWlBWVFZwVTBWS05GWnJaREJoTVVweVRVaG9hbE5HU2xaWmJHaHZZVVpXY2xac1dtdE5Wa1l6VjJ0YWQyRXdNVVZpUlZwWVlXczFlbFl5TVZka1IxWkpWV3hXVGxJeFNsaFhiRnBXWkRKV1YxTnVVbFZpUjNoVFdsZDRTMlZXV1hkaFNHUlZZbFphZVZSV2FFZFhSbHBHVTIxb1dsWjZSbFJhUlZwclYxZE9SMVJ0YUZOV1Jra3hWbXBKZUdReGJGZFhXR2hUWVd4S1ZsbFVSa3RrYkd4elZsaG9VMVp1UVRKV1YzTXhZVlphVlZGWWFGZE5ha1l6V1dwS1MxSnJNVmxTYkZacFZqSm9ZVlpYTURGaE1ERlhWRzVLV0ZaR1NuTlpXSEJHVFd4VmVGVnJkRlZOVld3MFdWUk9kMWRIU2xWU2F6bFZWbFp3ZWxac1duZFRSVEZYWTBVMWFWSnVRalZXYTFwaFZURldjazVWWkdwVFJWcFRWbXRhUzFWV1ZuSldibVJxVm14R05GZHJXbmRVTVVwMVVXeGFWazFYYUROV01uaFdaVVpLY1ZOc1VsZE5ibVEyVmpKd1EyUXhTWGRQVm1ocFVtNUNXRlJXV2xaa01WcEhWV3QwVlUxcldraFphMUpoV1ZVd2VsRnRSbHBpUm5CWVZHMTRVbVF4Vm5KT1ZUbFRZbXRLTkZadE1IaGlNVkY0VTJ0YWFFMHlhRmxaYTFwTFdWWlNXR016YUd0U2JWSldWbTB4UjFZeFNYaFRibWhYVFdwR2Vsa3llSFprTWs1SlVXeG9WMDFzU25oV1JsSkhVekExVjJFelpGcGxiRnB6V1ZST1UxSldXbGhOVjBaWVlsVndWMVl5TlU5V1ZURkhVMnhDV2xZemFIcFdNRnBUVmxaV2NrNVZOV2hOTUVvMlZtdGFiMlF5U25SV2JrcFFWbGRvV1ZaclZtRlpWbHB5VjJ0a1QxWnNTbnBYYTFwaFZHMUdObFp1YUZaTmFrSTBWbFZhV21WR1dsbGpSbWhYVWxoQ2FGZFljRU5qTVVwSFZtNVNXR0Y2Ykc5WlZFcDZaREZaZUdGSVpGTk5hM0JIVkd4b1UxWldXa1pqUjJoYVZqTlNlVnBYZUZOWFYwNUdWMjE0YUdWclNURldWekI0VFVaU2RGSnVTbXBUUlZwV1dWUktVMVF4Y0VWUlZFSnNWbXhLTUZrd1duZFdNVWw2VlZSQ1YxSjZWak5XVnpGUFVtMVNSMVZzU21oaVZrcE1WbFpTUjFNeVNsZGFSbFpVWVRGd1VGVnROVU5OUmxWNFlVYzVWV0pHY0VkVWJHaExWMGRLVlZKc1VscGhNWEF6V2tWYVUyUkhVa2RSYkU1VFlUTkJkMVpxUm1GVk1XUnlUbFphVUZac1dtOVVWRXBUVkRGc2MxZHRSbXBXYkVwWVYydFdkMVF4U2xWaVJteFhWbTFTY2xaV1dsWmtNVTV4VjIxR1UySldTazFYYkdONFZURk9WMVJzYUZCV1dGSlVXVmN4TkdReFdYaFhiWFJYWVhwV1IxUlZhSE5XVjBwWVlVZEdZVlo2Um5KVWJYaHJWMFV4VjFkdGVHaGxiWGhIVm10YVUxVXhiRmhTYms1WVlsUnNWbGxVUmt0VE1WSlhWMjVrVjFadFVsWlZNbk14WVZaYWRHTXphRmROYm1oVVdWUktSMk15VGtsUmJYUk9ZbFpLZUZaR1VrZFRNRFZYWVROa1dtVnNXbk5aVkU1VFVsWmFXRTFYUmxoaVZYQlhWakkxVDFaVk1VZFRiRUphVmpOb2VsWXdXbE5XVmxaeVRsVTFhRTB3U2paV2ExcHZaREpLZEZadVNsQldWMmhaVm10V1lWbFdXbkpYYTJSUFZteEtlbGRyV21GVWJVWTJWbTVvVmsxcVFqUldWVnBhWlVaYVdXTkdhRmRTV0VKb1YxaHdRMk14U2tkV2JsSllZWHBzYjFsVVNucGtNVmw0WVVoa1UwMXJjRWRVYkdoVFZsWmFSbU5IYUZwV00xSjVXbGQ0VTFkWFRrWlhiWGhvWld0Sk1WWlhNSGhOUmxKMFVtNUthbE5GV2xaWlZFcFRWREZ3UlZGVVFteFdiRW93V1RCYWQxWXhTWHBWVkVKWFVucFdNMVpYTVU5U2JVMTZZMFpXYUdFd2NIaFhWM2h2WWpKTmVHSklVbWxTZWxadlZGWmtiazFzV1hoaFNFNVdVbXRzTTFSV1VsTlhSMHBIVTIxb1dsWXpUWGhhUlZwclYxZEtSazlYZUdobGExVjNWbXRhYjJReFVYbFNhMlJxVWxaYVZWWXdaRFJaVm5CWVpVVjBhbFpzU2xkV1Z6RXdZVWRLU0dSRVZsWmlSa3BZVmtkNFlWTkdVbGxhUmxKT1ZsUldOVlpIY0VOak1VcEhWbTVTV0dKSVFrOVpWRVpXWkRGWmVVMUlhRlJpVmxwSFZGWmFWMVpYU2xsVmJXaGFZa1p3VEZsNlJtdGtSVEZXVDFkb1RsSkhlRWRXYkdOM1pVWmtjMWRyWkdobGExcFdWRlphUzJWV2NFVlJXR2hyVW14d01Ga3dWVEZXTURGSVl6TmtWMUpGV25KV1YzaDJaVVpHYzFWc1NtaGhNSEI0VjFkNGEwNUZNVWRVV0dSb1VsUnNUMVp0TVRSTlZscElZMFZPYUdKVldsbFhhMmhMVjBaS1JtTkdRbHBXVmxVeFZUQmFhMlJIU2taT1ZtUlRWbXhyZVZacVNqQmhNV3hZVWxob2FsSnRhRmxaYkdoRFlVWldjbHBIY0d0TlYxSXdWRlpXWVZSdFJqWmlSbHBhVjBoQ1dGWkhlRXRTYlU1SlZHeG9XRk5GU2tsWFZscFdUbFpLV0ZOcmFHdFNWRVpUVkZWV1dtVnNXa1pXYXpsU1RXeGFNRlpYZEhOV1IwcDBWVzVDVlZaRlJqUmFSM2hQWTJ4a1ZWWnRhR2xTTTJoWFYxWldhbVZHWkhSU2JrcFhZV3hLVmxaclZuZFdSbXh6VjI1a1ZGSnNjREJVVmxwM1ZHMUtSbFpZWkZkU00xSnlWMVprUjFKck5WbFNiV2hzWWtad1VsWnRkRmRTTURWWFdraE9ZVkpVVm5OVmJURTBaVVprZFdOR1pGcFdhMVkyVjJ0ak1WWkdXWGxsUlU1YVZteFpkMVpyWkVabGJFWnpVVzE0VjFaWVFYcFdha2w0WXpKS2RGSnJhRk5pUjNoV1dXMDFRMkZHV1hkWGEyUnJZa1UxZVZZeFVsZGhWbHBWVW14YVYxWnNTa3hXUnpGSFpFZFdTRTlXYUZkbGExcG9Wa1prTkdNeFdsZFRiRlpVWVhwc1QxbHJXbmRrTVZwSFdraGtWazFyY0VkVVZsWnZWbXhrU0dGSGFGZGhNVlY0V1hwR1VtVkdWbkpVYld4VFZrVmFWMVpVU1hoak1WSnpVMjVXVldKcmNGbFZhMVozVlVac1ZsWlVWbFJTYlZJd1dXdFZNVll4U2xkWFZFcFhUVzVTY2xkV1pFWmxSMDVIWVVab2FWZEZTbTlXVjNScllXMVJlRnBJVWs1V1ZuQlBXVmh3YzFac2JGbGpSbVJWWWtWd1Ixa3dhRTlYUm1SSlVXdG9XbFpzVlRGVmJHUkxVMGRTUjJKR1drNWliRWw2VmxSR1YxUXhWWGhqU0U1cVUwVmFWRlpyVmt0VlJteFlaRWhLVGxadFVsaFhhMVl3WVZaYVZWWnFRbFppUjJoMlZrUktSMlJHVm5WVWJHaFhUVEJLVEZaR1ZtRmtNVnBYVW01U2ExSlVWbGhVVmxwYVRXeFplV1ZHVG1waVZrWTBXVEJhVjFVeFpFaGxSMFphVmpOU1RGbFdXazlqYkdSVlZtMW9hVkl6YUZkWFZsWnFaVVprZEZKdVNsZGhiRXBXVm10V2QxWkdiSE5YYm1SVVVteHdNRlJXV25kVWJVcEdWbGhrVjFJelVuSlhWbVJIVW1zMVdWSnRhR3hpUm5CU1ZtMTBWMUl3TlZkYVNFNWhVbFJXYzFWdE1UUmxSbVIxWTBaa1dsWnJjSGhWVnpBeFZteEtjazVWVGxwV1JWcDFXbFphVTJSSFJrZFJiRTVPVjBWS00xWnJXbUZWTVVwMFZtNU9hbEpYYUZsWmJHaFRZVVphY1ZKdVpHcFdiVko1Vmxjd01WUnNTblZSYWtKV1lrWktURlpWV21GVFIwNDJVbXhXVjFacmNFMVhWM1JoWXpBMWMxTnVVbWxTYTBwVVZXcE9iMlZXV2tWVWJrNVNUVVJzVjFsclZuTlViRWw1Vlc1U1YxWkZTa3RVYkZwUFZteHdTVlJ0YkZkWFJrcEtWMWQwYjJReVJuSk5XRTVZVjBkU1ZWUlZWVEZXUmxKV1drVmtWRkl3Y0VwWk1GVjRWakZLUjFkdVVsZGlSa3BFVm1wR1ZtVkdaSFZUYkdScFVsUldZVlpHV21Ga01VVjRWMnhvYkZKVWJHRlpWRWsxVGtaYVNHUkhSbGRpVlhCSVdUQldhMVl4V1hwWmVrWlhVa1ZhU0ZadGMzaFdiR1J5WkVVMVYxSlZiM3BXV0hCSFZERkZkMDVJWkdsU1ZrcFhXV3hhZDFsV1VsaGtSbHBPVW0xU01GUldWbmRpUmtwVlVteGFWMUo2UlhkWFZtUkxWakZPZFZSc2FHbFdSVnBSVjFaU1FrNVdTbGRXYmxKT1ZtNUNXRlZ0TVhwbFJscEZVbXhPYW1KV1JqTlVWbWhUVmpKS1dWRnJPVmRoYTBwNVZGVmFVbVZHY0VkVGJVWk9WbFZ3VmxaV1kzZE5WbXhYV2tWa1ZHSnNjR0ZaVjNNeFZVWlNWbGR1VG10V01IQktWbTE0ZDFZeVZuSlhibkJXVFZaYVVGbHRNVVpsVmxaeVlVZG9WRkpWY0hoWGJGcFRVVzFPYzFwRlZsTmhlbXhVV1d0YVlXVnNXWGxrUjBaWFlsVndSbGxyV205V2JGcHpZMFY0VjJFeGNISlViRnAzVWpGV2MxUnNaR2hOTUVwYVZteGtORmxXVFhoalNFNVdZbXR3VkZsWWNGZFdSbHBWVTJ4T2FFMVZNVFJXVnpWM1dWVXhjbGRzYkZkTlYwMHhWVEo0V21WWFZrVlhiSEJzWVROQ1dWWkdWbGROUmtwSFZtNVNXR0pWV205WlZFWlhUVEZhU0UxWVpGUmhlbFpZV1d0YWIxWkhTbFZTYkVKYVlrWmFXRlJyV2xOa1IwNUlaRWRzVTJKWWFEUldWRVpUVVRGc1YxZHJXbFJpYTNCV1ZtMHhVMVl4Y0ZobFNHUlhWakJXTmxkclpFZFdNVXBYVjFSR1YwMVhVak5WVkVaelkyMU9SbHBHUWxkTk1FcG9WbTEwYTJJeVVrZGFSbWhxVWxad2MxVnNVa05PVmxwWVRVaG9XbFpyYkRSV01qVlRWMFphUm1OR1RsVmhNVlY0VlRCYWEyUkhSa1pQVjJocFYwVXhORlpyVWtkVk1VWjBWbXhrYWxKdGFGWldNR1J2V1Zac1dFMVhjRTVXYlZKNVZqRm9hMkZzU2xsVmJGWldWbTFSZDFZeFZYaGpNa3BGVld4V2FFMVZjR2hYYkZwV1RsWmtSMU51VW1sU01GcHZXV3RvUTJSc1drZFhiRTVZWVhwQ05Ga3dXbTlXUm1SSVpVWkNWbUZyV2xoVVZFWnJZMnhXY2xwSGJGTldSVWt4Vm0xNFUxWXhVbk5UV0doWFlXeEtWbFp1Y0VkVE1YQkZVbTEwVDFac1dqQldNbmgzVkcxRmVGWllaRmROYWtJMFZUSXhWMUpyTVZkV2JGWnBWMFpLYjFkWGVHRlRNazE0V2toU1RsWlViRzlVVlZKelVteGFXRTFJYUZoaVJuQklXVmh3UjFaVk1WZFRibXhoVWtWR05GcEZXbUZrUjA1R1RsWmtUbEl6VGpOV2ExSkhZVEZWZUdORldtbFNWbHBQVldwS1UxUkdWblJqU0U1cVZtMVNXRlpYTURWaFZscDBaVWhvVm1KSGFIWldSM040WXpGT2RWVnNhR2hOYkVwWlYxZDRZV050VmxkV2JGWldZWHBzVkZSV2FFTmtiRnBJVFZoa2FtRjZWbGRVTVZwWFZXeGtTR1ZIYUZkaGEwWTBWR3RhYTFkSFRraE9WVGxYWW10S1IxZFljRXRoTWtwWFZsaGtWR0p0VWxsWmJHUTBaR3hyZDFwRk5XeGlSa293V2xWa01GVnJNWFJWYm14WVlURmFjbGxxU2s5VFJsSnhWbXMxVWsweFNtRldSbHBXVFZaSmVGZHNhR3hTTUZwVVdXdGFZV1ZzVVhoWGJYUldZa1p3ZVZrd1dsZFdNREI1WlVoS1YyRXhjRXhXYWtaUFl6RndSMVJzWkdoTk1Fb3dWbXhhWVZZeFZYaFRiR1JYWW10S2FGVnFSa3RVVmxwVlUycENhV0pJUWxwWmExWkxZVVV4V0ZwRVZsZGlSMmh5VmtkemVHTnJNVlZVYkdoWVUwVktUVmRXVWtKTlYxSkhVMjVTYUZKVWJHOVphMXBhVFZaYVIyRklaRlZpVmxwSVdXdFNZVlpzWkVoaFIwWmFWak5TV0ZSVVJtdFdNWEJHVDFkb1UySllaM2RXVkVaVFZURmtkRk5zWkdoTk0wSlZWbXhhUjAweFpIRlNibHBzVm14d2VGVlhNVzlWTWxaMFpIcEtXR0V4V25KVmVrRXhWakpLUjJGR1dtbFhSa3A0VjFaYVYxSXlVbk5VYmtwb1VtczFjRlJYZEdGWGJGcEhZVVpPVmxZd2NFWlphMXBYVm0xS1IyTkZlRmRoYTFwTVZtcEdUMlJHWkhOYVIyaE9VbTVDVmxadGVGTlNNbFowVTI1T1YxZEhVbGhaYTFVeFYwWnNWVkp0UmxkU2JWSkdWVmQwYTFVeFduSmpSV2hXVFZkTmVGWXhXbFpsVjA0MlZHeFNWMVpVVmxWV01qRTBZMjFXVjFOc1ZsWmlWVnB3Vm14a00wMUdXa2RYYkU1VlRXdFdORmt3YUZOV2JVcFpZVWRvV21KR1ZYaFpNbmhTWkRGV2MxUnRiRmRpV0doWFZtcEdVMVl4VmtkWGEyaHJVa1UxVmxadWNFZFhSbXhZWXpOb1dGSnJOVlpXVjNoRFZqQXhWbGR1VmxkV1ZuQlFWVlJLUzJNeVRrZGlSbHBwVmtkNGQxWkdVa0pOUjFGNFdrWm9UMWRGTlhKV2JURTBWMVpTVjFwRVVsUmlSVlkxVjJ0b1MxZEdTa1pqUm1SaFVrVkdNMXBXV2xOWFZuQkhZMGQ0YUUwd1NqVldhMk4zWlVaSmVWSnJXazlYUlZwWVZqQmtORlF4Y0Zoak0yaFBVbTFTV2xrd1drdGlSa3AwWlVob1ZtSkhhSEpXTW5oYVpEQTFXRTlXYUZkbGExcE1Wa2QwWVdNeVVrZGFSbFpWWVROb1dGVXdWVEZrVm1SWFYyMTBXR0pWYkROWmExcHZZVlpPU1ZGdVJsVldNMmhoV2tSR1RtUXhVbk5VYlVacFUwVktORlpYZUZOUk1WRjVVbTVLYUdWcldsbFdiVEZUVkVac2MxWlVSbXRTYTNCYVdWVlZOV0ZIU2xkVGJuQlhUVmRTTTFVeWMzaFNNazVIVm14S2FWZEdTbEJXYlhCSFZqQTFjMXBJVGxaaWEzQnlWRlpvUTFac1ZuTmhTRTVZWWxWYWVWVXlNWE5XUjBWNFlYcEdXbFl6YUhwV2JHUkhVMFV4VjJOSGFHaE5WbXQzVm10YVUxTXhWWGxUYkdScVVsZG9XRmxzVWtkWlZsSllaVVZhVGxKc1NubFhhMlJIWVVaS1ZWWnVhRnBYU0VKWVZsVmFZVkpzU25GV2JHaHBVakZLVUZkc1ZtRmpNazVYWTBSYVYySlZXbFJaVjNSTFRURldObEpyT1ZKaVZWWTBWMnBPYzFkR1pFaGhSa0pXWVRGd2VsUnNXbEpsUm5CR1drZG9WMkpyU2pSV2FrbDRZakZTYzFkclpHaE5NMEpaV1d0a1UxTXhjRmRXVkVaVVVteHdXbGRyWkVkVk1VcFhZMGh3VjFKc1NreFdiWE14Vm1zeFZtRkdaRmhTTW1oUVYxZDRWMk13TUhoWFdIQnBVbXMxYUZsclpEQk9WbFp6Vld4T1dsWXdjRmRaYTFKVFZsWmFjMU5zUWxwV1JWb3pXa1ZhVjJSSFZraFNiV3hYVmtaYU5WWnJVa05WTVZWNVUyeGthVkpzV2xsV2ExcGhWVlphY2xwRVFrNU5Wa3BaVkZaYWEyRkhSalpTYkd4V1RWWktWRlpWV2xwbFJrNTBaRVpTVjFacldYcFdNbkJEWkRGSmQwOVdhR3BTYmtKWVZXcEtiMDFHV1hoYVNHUlRZbFphUjFSVmFITldiVXBWVW0xb1ZtRnJXbWhhUlZwclZsWk9jMU5yT1ZOV1JscEtWbXBKZUdJeFVYbFNibEpxWld0YVZsUldXa3RSTVhCWFYyNWtXRkpzU2xwWlZWcDNZVWRLV0ZSWWFGZE5ibEpVV2xkNGRtVldTbk5oUm1oWFpXMTRUVlpYTVhkak1rNVhXa1prVm1KVWJIQldiVEUwWlVaV2MyRkhPVlZoZWtaNlZUSTFVMWRIUlhsVmJHaGFZa1p3ZVZwV1dsZFdWbFp5VDFaT1RsZEZTakpXYTJONFpESk9jazVXV2xCV2JGcFRWakJrTkdGR1duRlJXR2hQVW0xU1dWa3dZekZVTVZwMVVXdFdWbFp0VW5aV1ZscFdaREZLZFZOdFJsTldNVW95VjFSQ2ExUXdOVlpOVlZKclVtMTRUMVpzVWxkVFJscHpXa1JTV2xacmNIcFdiVFZQVlVaYWRGVnNUbGRpV0ZJelZteGFXbVZ0U2toa1JtUlRZVE5DV1ZaVVNqUmhNVlY0VjI1S2FsSjZSbGRXYlhoaFZrWldjMWRzWkdwU2JrSkpWbGQwTkZack1VWmhNM0JXVFZaYWNsbDZTa3RXYlZKR1ZXeE9hV0V3Y0hoV1JsSkNUVmROZUdORldsVmlWRlp2VkZaa2EwNVdXWGhoUnpsVlRWVndTRmxyVWxkV1ZURllWV3RvV2xac2NETlpNVnByWkVkR1JrNVdaRk5pV0ZFeVZtcEtOR0V4VG5SV2JGcFBWbGRvV0ZZd1pGTmhSbFp5Vm0xR2FrMVdTbFpWTW5oaFZERmFWVkpyYkZkaVIyaDJWa2N4UzFadFNrVlViR1JPVFc1b1ZWWkdWbXRTTVU1SVUydHNhbEpVUmxoVmExcGhaRVphYzFWclRsZE5WbFkwVmpJMVMxWXlTa1pPVm5CVlZteHdNMVZVUm1GWFIxWkdUMVp3YUUxcWF6QldhMlF3V1ZaYWRGTnJaR3BTVjFKWVZtcE9hazFXVmxobFJYUlRZa1phZWxaSGREQlViRnBHVjI1S1ZtVnJXbEJaTW5oMlpESk9SbHBHUWxkbGExcFFWbTEwWVZKdFZsZFZiR2hxVTBVMWIxVnRNVFJOUmxsNFZXdDBXR0pHY0VkV2JHaHpWbGRHY21OR2FGcFdiRlkwV1RGYVYyUkhWa1pPVms1T1ZsWnJkMVpxU2pSVk1WRjVVMnRhVUZac1dsTlpiR2h2VkRGYWNsWnVaR3BTYkVwWFZqSTFkMkZGTVhOVGEyeGFWbGRvUkZsWE1WZFdWa1paVTJ4b1UxSldjRkZXVnpFMFZqSk5lRnBJU2xoaVJuQndWV3RrTkZkV1dsZFhiVVpVVFZad1NGZHJVbGRaVmtwelUyeFNWMkpZVWpOV01GcFhZekZrY21SSFJtbFNWbkJZVm14a01GWXhXblJTYkdoV1lsaFNXVlZ0Y3pGUk1WRjRWbTVPVTFKc1duaFZWekZ2VlRBeGRWcDZTbGRTVm5CVFZGWmFkMk14V2xsYVJtUnBVbFJXV1ZkV1VrZFpWbHBIV2tWV1UySlZXbE5aYTFwaFpXeGFTRTFWZEZSTlJFWlhWR3hXYTFZeFdYcGhSMmhXWWxob1dGbDZRVFZXYkU1elZHeE9WMkV6UWxaV1ZFcDNVbTFSZDA1SVpHbFNWM2hQVldwS1UyUkdXbFZSYTNSclRWZFNNRmxyWXpWaFIwcFdZa1JhVjJKVVZsaFpWRVpHWlZad1NWTnNhRk5TV0VKb1YyeFdWazFXU2xkYVJteHBVbXRLV0ZSVlduZGtNVmw1VFZoa1dsWXdXa2RVVmxwWFYwWmFSazVYYUZkaGEwcDZWR3hhVTJOc2NFZFhiWFJPVjBWS1IxWlhNSGhPUmxKeVRWaE9WMVpGV2xaV2JHUlRWakZ3VmxaWWFHdFNhelZhVjJ0V05GWnJNVVpXYm14V1RWWmFWRlZYTVU5U2JVcEdZa1pTYVZkSGFIbFdWRUpoV1ZVMVYySklVbWxTVlhCdlZGWmthMDVXV1hoaFJ6bFZUVlZ3U0ZsclVsZFdWVEZZVld0b1dsWnNjRE5aTVZwclpFZEdSazVXWkZOaVdGRXlWbXBLTkdFeFRuUldiRnBQVmxkb1dGWXdaRk5oUmxaeVZtMUdhazFXU2xaVk1uaGhWREZhVlZKcmJGZGlSMmgyVmtjeFMxWnRTa1ZVYkZaT1RXNW9SVmRVUW1Ga01rNUhZak5zYTFKdGVITlphMlF6Wld4WmVHRklaRlZOYTNCWVdUQm9SMVpzV2taT1YyaFhZVEZhUjFSV1dtdFhSVEZYVjJzNVYxWkdTVEZXYlhodll6RlJlRk5yV21oTk0wSldWbTV3UjFSR2JISldXR2hyVW14YVZsWlhjelZXTVVwWFkwaG9WMDF1VWxSWlZFcExVbTFLUmxack5WTlNNMmhNVmxaU1MxVXhXbGRXYkdSWFlsVmFWRmxyWkd0Tk1WSlhWMnRPVmsxVmNGaFdiVFZYVmtaYVdGcDZRbFZOUmxwNlZXdGFWMlJHWkhKUFYyaG9UVWhDTkZacldsTlRNV3hZVTJ4YVQxWldXbWhWYWs1dlZERldjbHBFVW1wU2JWSjZWbGMxUzFSck1WbFJiRnBXVFZaS1JGWkhNVWRrUmxKeFZteG9WMlZyV2xoWGJGcGhaREZLVjJORVdsTmhlbFpZVkZWU1YyVldXa2hqUlhSWFlrYzVORlZYZUZkVWJFbDVWV3Q0VlZaV2NHaFdhMXBoVjBkT05sWnNXazVXTWxGNlZrUkdZVkl4VlhoWGJGWldZbXhhVlZSV1ZURlNSbkJYVjI1a1dGWnNXbmhWYlRGM1lWWmFSMU51VmxaTmJsSmhWR3RWZUdOck1WWmhSbFpZVTBWS2IxZFhlR0ZqYlZGNFZXNUdWR0pHY0hKVVZWSnpWMVpWZVUxVVVsWlNiSEJKVmxjMVQxWldXWHBSYkU1aFZteFZlRlJ0ZUU5a1IwcElVbXhrVTFkRlNqVldhMUpEVlRGYWRGWnJaR2hOTW5oWFZtdFZNV0ZHV25KaFJUbHBZa2QwTlZSV1dtdFViRWw0VTJ4d1ZrMXFWbGhWTW5oR1pWWldjbVJHWkZkV2JYTjNWa1pXVm1WR1NsZFdiR2hQVm10S2MxWnNWbkpOVmxWNFZtMTBXbFpVUmxsVk1qVlRWbGRHY2xOdE9WZGlia0o2VkZaYVQxWnNaRlZXYld4cFUwVktZVlpzWTNoWlYwWlhWMWhrV0dKcldsbFZhMVozVTBac1ZWSnVaRlJXYXpVd1dsVmtkMVJyTVVWU2FrcFdaV3RhVUZWVVFUQmtNa3BHVld4YWFWWnVRbEZYVm1Rd1V6Sk9WMVZzVmxSaVZWcHdWbXhTVjFKc1pISmFSRkpWWWtWd1NWcFZhRU5YUjBwSFUyNXNWVlpGV2pOV2JGcFBWbFpHY2s1WGFHbFdWRkY0Vm1wR2FtVkdXblJXYkdScVVsWmFhRnBYZEdGVU1WcHhVVlJHYW1KR1NuaFZNbmhoV1ZVeFZsTnNWbFpXYlZGM1dWUkdTbVZYUmtsYVJuQk9UVzVSZWxVemNFZGliVlpYWTBWb2JGSXpVbFJaVnpFMFpVWmtXR05GY0U1V01IQlpWVzE0YjFkck1YRmlSVEZYWVRKb1VGbHRlRTlqYkdSVlZXMTRhVkl6WTNsV2JGcFRWVEZrYzFkWVpGZGhiSEJaV1d0a1UxTXhjRVZTYmtwc1ZtdHdNRnBGVlRWVk1VbDZWR3BTVjFKRlduSldSRXBMVmpKT1JsWnNUbGRTYkhCb1YxWmplRlJyTVVkVmJsWnFVak5DYzFWc1VrZE5SbFY1VFZSU1ZXSkdWak5WYkZKWFZrWmFXR0ZHUWxWV1YxSlFXa1phVjJSV1pIUmlSazVzWWxoUk1sWnFTalJpTVU1MFUxaG9WMkV4Y0c5VmJYUmhWMnhTVmxWdVRsZFdhekUwVmxjMWQxbFZNWEpYYkd4WFRWZE5NVmxYYzNkbFJtUjFVV3h3YkdGNlZsVlhiRnBYVFVaS1IxWnVVbGhoZWxaUFdWaHdRMDB4V2tWUmJYUlRUV3RhUjFSVmFITldNa3BZWlVVNVZtRnJSWGhaYWtaclkyeFdjMU5yT1ZkV1JscFhWMWQwYTJReGJGaFRiR1JUWVd4S1ZsUldaRk5UTVZKVlVWUldVMVp0ZHpKV1IzTXhWakZLV1ZGdVpGZE5ibWhVVlcweFRtUXlTa1pXYkVwWVVsUldURlpYZEZabFIxRjRWbXRrVmxkSFVuQlpiRnBIVGxac2NtRkdaRlJOYkZwWldrVmpNVmxXWkVobFJVNWFWa1ZhZGxSdGVHRmtSVEZXVDFVMWFWTkZTak5XYWtaaFZURktkRlpzWkdwU1ZscFdWbXRWTVZWV1duSldiVVpxWWtaS1dWa3dWa3RVYlVwSlVXcENWbUpVUm5aV01uTjRZekpPU1ZWc1ZsZGlSWEJGVjFaV1lXUXlVa2RUYkZaU1lYcHNWRlJXV25kbGJGVjRWbXhLYTAxWE9UUlpNRnB6WVVaT1NGVnVRbFppYmtKNldUSjRhMk14VW5ST1YyaE9Za1Z3U2xkV1ZtOVJNa1owVm14V1VsZEZjRmxWYTFaS1RVWlZlV1ZHVG1waVJuQjVWa2Q0WVdGRk1WZGpSVkpYVmtVMWVsUlVSblprTWs1R1drWkNVMUpZUWxCV1YzQkNaVVUxYzFwSVVrNVdia0pQVld4U1UwNVdXbk5oUjNSV1VteHNNMWt3YUU5V1ZURlhVMjVLV21FeFZqUlpNVnBYVjFkS1JrOVhlR2hOTUVvelZtcEtORlV4VFhsU1dHUlFWbFphV0ZZd1pHOVpWbEpZWlVWYWJHSkhVbnBXUnpWTFZEQXhTR1ZGYkZkTmFsWm9XVmN4UzFZeFpIUlBWbWhYVWxoQ01WWXljRU5OUmtwSFZtNVNXR0Y2YkZoVVZtUXdUbXhaZVUxSWFGUk5hMXBIVkZaYVYxWkhTbGxWYXpsaFZucEdUMVJXV2xOV01YQkhVMjE0VjFaRldrZFdha2wzWlVaa2MxZFlaRmhpYTFwWldXeFNSMWxXY0ZaV1dHaFVVbXR3TUZSV1duZFdNVXB5Vm1wT1YwMXVhSEpXYlhoMlpVZEtSMkpHVmxkTmJFcE5WbGN4ZDJKdFZuTlZXR1JXWWxoU2NGVnNVbGRXYkZsNFZXeGtWbEpzYkRSWk1HaFRWMFpaZWxGclVscFdiRlV4Vld4YVYxWldUbkpPVms1T1ZsaENORlpyWTNoa01rcDBWbXhrYVZKR2NGbFpiR2h2V1ZaYWNsZHJaRTlTYkVZelZsZDRUMkZHV2xWV1ZFcFZWbFUwZDFWNlJrdGpWMHBKVVd4b1YySldTbGhXUjNSV1pESldWMVZ1VW1oU2JrSnpXV3hrVWsxc1dYaFpNMmhYWWxaYWVWUXhWbGRXVmxwSFUyMW9XbFl6YUdoWmFrWlRZMnhXY21ORk5WZGlhMHBYVm1wR1UxTXhVblJUYkdSb1pXdGFXVmxyV2t0amJHeFlaVWhrYWxJd1ZqVlhhMlEwWWtaYVZtTkVUbGROYWtaNldXcEtVbVZXVW5WVmJHUnBWa1phWVZaR1pIZFNNa2w0WTBWYVlWSlViSEJVVldoVFVsWlZlR0ZIUmxWU2EzQXhWa2R3VDFaV1NuTlRibkJhVmxaWk1GWXdXbXRrUmxaellVZDRhRTFHYkROV2ExSkhZVEZLZEZWclpHcFRSVFZQVm1wQ2QxUnNXbkpoUlU1b1RWVXhORmxWYUhkVWJGbDRZMFpXV2xaWFVreFdSM2hIVG14R1ZWSnNhRmRoZWtVd1YxZDRZV0l4V1hsVVdIQmhVbFJHV0ZWcVRtOWtiRnBHVjIxMFdsWnVRa2RhUlZwVFZVWmtSbE5yZEZwV2JXaHlXVzE0VDJOc1pGVldiV2hYWWxob1dsWnRlRk5WTVZKeVRWaEtUMVo2YkZsV01HaERaRlp3V0dWSVRtdFNiSEJhV1RCYVExVXhTbFZSV0dSWFRXcEdNMVpxU2tkU2F6VldWbXhTVjFKV2NHOVdiWFJoWTIxV1YxVnNhRTVXYmtKUVZtMDFRMVpzWkhKYVNHUmFWakJhV1ZwRmFHdFdSbHBZWVVSYVdHRnJTak5WYWtFMVUxZEtSazlXVGxOaE1XdDNWbXBHWVZVeFduUldhMXBPVTBkNFZGbHNVa2RaVmxKWVpFZEdhbUpHU2xoV1Z6RjNWREZLZFZGdWFGcGhNazQwVmxWYVdtVkhUa2xTYkdob1RWVndlVmRYZEZaTlYxSkhWRzVTYkZKclNsUlZhazV2WkRGYVNHUkZPVkpoZW14WFdXdFdjMVp0U25SbFJ6bFhZbTVDUkZwSGVFOWpiR1JWVm0xb1YySllhRnBXYlhoVFZURlNjazFZU2s5V2VteFpWakJvUTJSV2NGaGxTRTVyVW14d1dsa3dXa05WTVVwVlVWaGtWMDFxUmpOV2FrcEhVbXMxVmxac1VsZFNWbkJ2Vm0xMFlXTnRWbGRWYkdoT1ZtNUNVRlp0TlVOV2JHUnlXa2hrV2xZd1dsbFpNM0JQVmtaYVdHRkZlRnBoTWxKVVZURmFZV1JYU2toaVIyaFhWbGQzZWxZeFVrcGxSMDE1Vld0YWExSlhlRlpaVjNSaFdWWnNkR042UW10TlYzUTFXV3RqTVdGRk1WaGFla3BXVFZaS1JGWkVSa3RTYkdSMFQxWldhVkpyY0VoWGJHUTBZekZrUjFwSVVtcFNia0pZVkZaV1drMUdXa2hPV0dScFRXdHdWMVF4V205WFJscEhWMjFvV21KR1ZYaFpNbmhUWTFaT2MxZHJOV2xTTTJkM1ZtMTRVMVV4VmtkWFdHUm9UVEpTVmxWc1ZURlNSbkJZVFZaT1ZGWnJOVEZaYTJSM1ZUSldkR1I2U2xabGEwcFFWbFJHZDJOck1WbFNiRnBYVWxWd1VGWnRjRU5XYlZaSFZXeGtWbUY2Ykc5VmJUVkRUVVphU0UxWE9WcFdhM0JIVm14b2QxWlZNVWhWYlVaVllrWndNMWt4WkV0VFJURlhZMFUxYVZKV1dUSldha28wVlRGc1dGSnNaR3BTYkZwb1dsZDRZVmxXYkZobFJXUnNZa1UxVjFaSGRIZFpWVEZJWlVoa1dsWkZOVVJXUlZwaFUxWlNkRTVYUm1sU1ZGWkZWa1JHVjJNeFRsWk5WV2hoVWpCYVdGUlVTbTVOYkZsNVpVVTVVazFFVWpOWmExWlRWbTFLVjJOR1FsVldNMmhJVkd4YVUxZEhUa2RhUjJ4VFltdEtORlpyWTNkbFJtUjBVbTVTYWsweWVGWldhazVEVXpGU1YxWllaR3hXYkVwV1ZXMXpOV0pIU2xkVGFrSlhVbXhLVEZZeWN6RldhemxYWVVaYVYxSnJjRzlXVjNCRFZtMVdWMVZ1Vm1wU1ZYQm9WRlpXUzFaV1ZsZGFSRUpvVFZWc05WbFZhR3RYYXpCNVpFUk9WR1ZyV25WYVZscDNVMGRXU0dSR1RtaGlXR1ExVmpGb2QxSnJOVlpOV0U1cFVtMTRWVlp1Y0hOVVJsSllZMFZrYVUxWFVscFphMlIzWVdzeFNHVkZWbGRXZWtab1ZrZHplR05yTVVsYVJsWk9VakZLU1ZkV1ZsWmtNbFpYVjI1U2FWSlVWbFJVVlZKWFpHeFplV1JHVGxaaGVsWlhWR3hhVjJGV1NYcFJiV2hhWWtad1NGUnJXbEpsUm5CR1kwVTFUbEpIZUVkV01XaDNWREZTYzFkcldtcFRSVXBaV1d0YVMxSXhhM2RXVkZaUFZtdGFXVnBGV25OVWJVVjRWbGhrVjAxdVVuSlZNakZYVmpKS1NWVnNUbGhTTTJodlYxWmplRlJ0Vm5OYVNFNWhVbFJzYjFac1VrZFhWbGw1VFZoa1dHSlZjRmRXTWpWRFZsZEtSMU51U2xwaE1WVjRXVEZhWVZaV1NuSk9WazVUWW10S01sWnFTalJWTWtaeVRWWmFhVkpXV2s5VmFrcFRZMVpTVlZKcmRFOVdiWFF6VjFod1YySkhSWHBWYTFaWFZucEdhRlpFU2tkamJFNTFVbXhXVjFKWVFtOVhWM2hXVFZaS1YyTkZhR3hTVkZaVVZXcE9iMlF4V1hsbFJrNXFZWHBDTkZrd1dsZFdSbHBHVTJzNVdsWjZSbEJVYkZwclYwVXhWMWR0ZUZkaWEwcEhWakkxZDFJeFVuTlhXR1JQVjBWd1ZsbFhkSGRXTVd3MlVXNU9VMUpzV2pCV01uTTFWRzFLUmxkVVJsZFNiVkl6Vm1wS1MxSXlUa2xTYkZacFZrVmFhRmRXWTNobGJWWlhWV3hvYWxKWVFrOVdiRkpEVGxaYVIxVnJaRlZOYkZvd1ZsYzFVMVpXV2taalIwWlZZa1pWTVZZd1dsZFdWbFowVW14T1RsSnNXVEZXYTJNeFpERkdkRlJyV2xCV1JscFRXVzEwUzJGR2JGZGFSM1JxWWtkU1JsVXlkR0ZVTVVwMVVXdHNWazFYYUhwV01qRkxWbXhhY1Zac2FHbFhSVXA0VmtaU1IyUXhaRWRWYmxKcFVsUldXRlJXYUVObFJsbDRXVE5vVTAxcldsZFViRnBYV1ZaSmVtRkdRbHBXTTJoWFdsVmFVMVpzVm5SU2JXaFRZbXRLVjFZeGFIZFNNVkpIVmxoa1ZGWkZOVlZXYkZVeFZrWmtkR1ZJWkZOV2JWSXdXa1ZWTlZZeFNYZE9SRUpYVFc1b1ZGVnRjM2hTTWs1R1ZteFdhVlpGV2xCV2JYUmhVbXN4UjFwR2JHcFNiSEJRVld4U2MxWnNXbGRoU0U1V1VtdHdSMVJWYUc5WFJsbDZVV3hrWVZKRlJqUlZNRnBQVmxaT2NrOVdaRk5XUlZveFZteFdZVlF4UlhkTlZXaFZZbXhLY0ZVd1drdFVWbFYzVmxSQ2JGSnRVbGxVYkZVMVZHeEpkMDVZWkZoaGEyOTNWakZrVjJNeVNrVlViR2hZVTBWS1VWZFhlR0ZrTWs1WFZteFdWV0pWV2xoVmJGWldaVVpaZUZremFGZGhlbFpYVkd0b2MxWXhaRWhsUmtKV1lURmFlVnBYZUZOWFJURldaRWRzVTFaRldYZFdiRnBUVlRGUmVGZHJXbGhpYTFwWldWUkdTMk5zYkhKV2FsSlRVbXRhV1ZReFZqQlZNa1owWlVoYVYxSkZTbkpXVkVwSFZtc3hXVlZzVW1sV01taFFWMWQ0WVdOdFZuTlZia1pVWWtkU2IxbHJaRFJsUmxaMFRVaG9XR0Y2Um5sWk1HTTFWMFpaZWxGc1pGVldSVm96Vm14YWExWldTbkpQVm1SVFZsWlpNVlpxUm1GaE1WcHlUVWhrVDFac1NuSlZNR2hEWTJ4VmQxWnVaR3hpUjFKNlYxaHdRMkZWTVVsUmEyaFZUVVpLVUZkV1drdFNiVXBGVm14V2FWSXhTbGxYVjNoV1pESldWMXBJVW1sU2EwcFlWVzB4TTAxV1drZGFTR1JYWWxaYWVsbHJVbUZXTVZwR1RsWkNWVll6YUhwVWJYaHJaRWRPU1ZOck9WZGlhMHBIVjFaV2EwMUdaSE5YYTJSb1RUTkNWbFpzVlRGbFZtdDNWbXBDVjFJd1dUSlhhMVozVmtaS1dWRnVjRmhoTVZwMlZtcEtWMWRHVG5WUmJFcG9ZVEJ3ZUZkWGVHdE9SVEZIVkZoa2FGSlViRTlXYlRFMFRWWmFTR05GVG1oaVZWcFpWMnRvUzFkR1NrWmpSazVWVmpOb00xVnNXbUZXVmxKeVRsWmtUbFpzYTNkV2EyUXdZVEZXZEZadVRtcFRSVnBVVm10V1MxVldWbkZSV0dSc1VteEdNMVpYTlV0VWJFcFZVbTVvV0dGck5UTldSRVphWkRKRmVtRkdWbGRXYTNCRlYxWmFWazFYVGxkWGJHeHFVbFJHVTFSVlZscGxiRnBHVm1zNVVrMXNXakJXVjNSelZrZEtkRlZ1UWxWV1JVWTBXa2Q0VDJOc1pGVldiV2hPVWtaWmQxWnNXbE5TTVZGNVZtNUtXR0pyTlZaV2JYaExWa1pzVlZGWVpHeFdiVkphV1ZWVk5WVXhTWGxoU0doWFVqTm9WRmx0Y3pGV2F6VldWbXhTVjFKcmNGQlhiR1EwV1ZkT1IxVnVUbFpoTUhCeVZGWmtOR1ZHV1hoVmEyUlZZbFphV2xkcll6RldSbGw2V25wQ1lWSnNXbnBaTUdSR1pXeEdjbVZHWkZSU1ZGWXhWakl4TkZReFJYZFBWbHBwVWxkNFZWbHNhRzlqYkZWM1YyMUdUMVp0ZURCWmExWkxZVmRLUjFOc1pGWmlXRkpVVmpGa1YyTXhTbkZVYkZab1RVUldlRlpIY0VOak1VNVdUVlZvWVZJd1duQlphMXAyWlVaWmVGVnJPVlpOYXpWSlZURm9jMVF4U1hsVmJIQlZWbnBHVkZsNlJuZFNiR1JWVm0xNGFWTkZTbUZXVkVwM1V6RnNWMXBGV21wU2VrWmhWbTB4VG1WR2JITmFSWFJQVm0wNU5sVlhkSGRXUms1R1RsaFdXRlpzY0hKV01qRktaVWRPUjJGRk5WaFNNVXA1VmxSQ2EwMUhVbk5VYmtwb1VtczFjRlJYZEdGWGJGcEhZVVpPVmxZd2NFWlphMXBYVm0xS1IyTkZlRmRoYTFwTVZtcEdUMlJHWkhOYVIyaE9VbTVDVmxadGVHOWpNazUwVkd0YWFWSlhlSEZVVnpGVFZFWlZkMWRyZEd0aVIzaFlXVlZWTVdFeFNuSlRha1pYVW5wRk1GbFVSa3RqVjBwRlYyeG9hVkl5YUUxV1JtUTBaREZrVjFSdVVsaGlXRkp3Vm14YWRrMVdaRlZVYms1cFlsVldORmRxVG05V1YwVjRZMFprV21FeGNETlZha1poVjBkS1NWTnJPVTVTTTJoTFZrWldhMkV4VFhoVGJrWmhaV3RhV1ZadE1WTlpWbkJZWlVoS2JGWnNXakJaYTJSSFZUQXhWMVpxVWxkU2JGcFVWVzB4VjFKck5WWldiRXBwVjBkb1VGWlhkR0ZrTWtsNFZWaG9WbUpWV205VmJURTBWMVpXYzFWc1RsaGlWWEJZV1d0U1QxWlZNVmRUYTNSaFZteHdNMVZyV2tkV1YwcEdZMFpPVGxKdE9IaFdNVkpLWlVaSmQwNVdXbXRTVmtwdldsY3hVMU14Vm5GVGFsSnJVbXN4TTFkcmFFOWlSMHBXVFZSV1YySllRa1JXUlZwR1pVWk9XVnBHY0ZkV01VbzJWMnhrTUU1R1dsWk9WbWhZWWtad1QxVnRlSGRXVmxwMFRWUkNWMDFXVmpSWGFrNXZWMGRGZDJOR1pGcGhNVlY0V1ZaYVQyTldTbkpQVms1cFVteHdObFpxU2pCWlZscDBVMnRXYVZKVk5WZFpWRVpoVmtaYVZWRnVXbXhTVkVaS1ZWZDBkMVZyTVZobFJFSldUVlphVUZsdE1VZFRSbEpaWTBaYWFXSllhSGhYVnpFd1V6QXhjMkV6Y0dsU2VsWnZWRmQ0UzFOV2JGWmhSVTVvWWxaYVZsVldhRXRYUmtwR1YyeENWbUpZYUZoWmVrWnJZMnhrYzFkdGJGTlNNMmhhVm14YVlWbFdUWGhYYTJSaFVrWmFhRlZ0ZUV0V1JscDBaRWhrV0ZKc1ducFdNblF3V1ZkS1JsZHNaRmRXTTFKWVZtMHhSMWRHVm5Sa1JsWlRWbFJXUkZkWE1YcGxSbHBYVkd4V1ZXRjZSbTlaVkVKYVpVWmFSMVpyTlU1U01WcEhXVEJTVjJGRk1YUlZibEpXVFVkb2NsbHRlRTlqYlVaSFZHMXNUbUV4Y0dGV2ExcHZWVEZXV0ZKWVpGaGhlbFpZVld4YVZrMVdXWGRYYlRWclRXeGFTRlZYZUV0VWJFcFhZMFU1Vm1WcldsQlpNbmgyWlZaYWNWWnNTbGROTVVwaFYyeGplRTVIU1hoYVNGSnFVbFJzYjFscmFFTlRWbFY1VFZSQ1dsWnNjRWhXYlhCUFZsWmFjMU5yWkZWV1ZsWTBWVEJhWVZkV2NFWlBWMnhYVm14V05GWnJZM2RsUmtsNVVtdGthVkpzV205VmFrbzBZVVpzV0dSRldrNVdiRXBaV1RCV01HRkZNVmhWVkVaWVlURndWRlpVUm1GamJVNUhZVVphYVZKdVFrMVdNakUwVWpGYWMxWnVTbGRpUm5CdlZtcEdTMk5zVlhoV2JFcHJUVmM1TTFrd1ZuTldiVXBWWWtjNVYwMUdWalJVVlZwWFUwZFNObFpzWkZOaE0wSlpWbFJLTkdFeFZYaFhia3BxVW5wR1dGbHNhRk5UUmxwVlVteGFiRkl3TVRWVWJGcGhWR3hLYzJOR1ZsZGlWRVYzVm1wR1ZtVkdiM3BhUms1b1RWWndWVlpYTVRCak1sSlhXa1ZrVm1KdVFtaFVWM2gzVmxaV1dFNVZUbHBXTUZwWldWVm9hMWR0Vm5KT1ZrSmFZVEpTVkZWclduWmxWMUpJWkVaT1RtSlhaM3BXTVZKUFkyMVJkMk16YUdGTk1taFdXVlJHZDFZeGJISlhibVJUVFZad1dWcEljRmRXTURGV1YyeG9WazF1YUZSV01HUlhWMFpXY21OR1pHaE5XRUpWVm14YVlXSnRVWGxTYTJSU1lrWndUMVp0ZEdGTlZsbDNWMnM1YW1KSE9UTlpNR2hEVjBaWmVWVnJNVlpXUlVwb1ZHMTRkMUp0Umtaa1IzaFhUVVJXU2xaRVJtOWtNVkpIVWxob1ZGZEhVbUZXYkdSVFpXeHdXR1JFVWxkV1ZGWlpWako0WVZSc1NuTmpSbFpYWWxSRmQxWnFSbFpsUm05NllVWm9hRTFJUWxoWFYzUldUVmRHVjFSdVJsSmlWR3hZVm0xNGQxTkdWbGhOVjBaWFVtdHdWbGxyV2xkV01rVjNUbGhLV0dFeFdUQlZhMXBIVjBVMVZrNVdaRk5XTTFFeVZtdFdhMlF4Um5SVmJGcE9WbFpLVUZVd1pHOVVSbkJYV2tSQ2FXSklRbmxaVlZKUFdWVXhTVkZyY0ZkV2VrRXhXVlZhYTFKck1WVlJiRnBUVFRGS1NWWnJXbUZWTVVweVQxWmthRkp0ZUU5Vk1HUnZWV3hhVjFWclRsTk5Wa3BYV2tWYVUyRkZNWFJWYms1aFZteGFTRmt5ZUd0VFYwNUpWRzFvVTJKclNqUldhMk40WkRGc1YxTllaR3BUUlhCWldXdGFTMVl4Y0VWUldHaFhWbXR3VmxWWGN6RlZNREZYVjFod1YxSjZRalJWYlhNeFZtczFXVlZzVG1sV01taG9WbTEwYTJJeVRrZGFTRkpxVWxWd1VGWnNVa2RsUmxWNVRWUkNXRkl4V2xsV1YzUjNWakpGZUdOR1VsZFdiSEIxV2tSS1IxSXhSbk5YYXpWWFlURnZlRlpxUW1GVU1VWnlUMVphYVZKV1NsZFpWM1JMWWpGV2NWTnFVazlpUmtwSVZsWlNSMWxYU2tkV2FrNVhZbGhvVUZacVNrWmxSbVJ6Vld4b1UxSldjRzlXVm1RMFZqSk5lRlZ1VWxSaE0xSlBWV3BLYjFZeFduUmtSMFpTVFZoQ2VsWkhkR0ZWUmxwelUyeG9WbFpGY0ZSWlZFWlNaVzFLUmxSc1FsZFdNMmhLVjFkMGFtVkdVa2RUV0d4c1VrWndZVnBYZEhkWFJsSldWbXBDVTFKc1duaFZWekZ2VlRBeGRWcDZTbGRTVm5CVFZGWmFkMk14V2xsYVJtUnBVbFJXV1ZkV1VrZFpWbHBIV2tWV1UySlZXbE5aYTFwaFpXeGFTRTFWZEZSTlJFWlhWR3hXYTFZeFdYcGhSMmhXWWxob1dGbDZRVFZXYXpsWFUyeGtWMUpXY0VsV1ZFcDNVbTFSZVZScldtdFNiRXBUV1ZjeFUxTXhWbFZTYTNScFZteEdORmRyVm10aFZscFZVV3BXVjFKNlJYZFdNakZMVmpGT2RWUnNWbWxTYTNCRVYyeFdWbVZHV2xkV2JHeGhVakJhV0ZWc1ZsZE9WbGw0VjJ4T2FtRjZSbnBaYTFwdlZUSktXR0ZHUmxaaGEwb3pXa1ZhVTFac1ZuVlRiWGhYVmtWWmQxWnNZM2hUTVUxM1RWWmFUMVpYVWxoV2FrNXZZVVpXZEdWR1pHcE5SR3hYVkRGYVMxWXhXa1pYYTJoV1RXNUNSMXBFUm5abFJrWnpWV3hLVjAweFNubFdWM0JMWWpKUmVHRXpjR2hOTWxKTlZGWmthMDVHV2toa1IwWlhZbFZ3U0Zrd1ZtdFdNVmw2V1hwR1YyRnJXa2hXYWtaUFl6RldjMkZIZUZkTlZYQlhWbXhrTkZsV1RYaFhXR2hVWWtkU1ZWbHNXbmRXYkd4VlVXMUdWVTFXV25wV1J6RXdXVlpLVldGNlJsWldNMEo2VlRKNFNtVlhWa2xWYkZKT1VqRktObGRzWTNoVWJWWlhWMjVHVW1FemFGTlVWbFp6VFRGa1YxWnRkR3BOYkZwNVdsVmFWMVF4V1hoalJtUlZWbFp3YUZacldtRmtSMUpIV2taYVRsWXlVVEJXYWtvd1V6RmFkRk5yV2s5V01uaFZXVmQwWVZKR1ZsaGxSMFpUWWxWYVNWWXllR3RWTWtWNlVXdFNWMkV5VVRCV1JFWlRWakZLYzFwR1dtaE5XRUpWVmxaU1MxVXlSWGhVV0doVlltdHdhRlJYZUZwTlZsWlhXa1JDV0ZZeFdqQmFWV00xVjBkS1dWRnNRbHBXTTJnelZUQmFUMlJIVWtoU2JHUlRZa1pzTmxacldtRlZNVXB5VFZWYVRsWlhhRmhXTUdSVFZVWnNjMVpzV2s1V2JFb3dWRlpXYTJGR1NuUmxSbHBhVmxkU2VsZFdaRWRqYkVwVlVteFdWMDB3U2sxWFZsSkhZVEExVjJORlpGTmlSWEJZV1d0V2QxTXhXWGRWYTJSV1RWWldORlZ0ZUdGVU1WcHpVMnhhVm1KR1dtaFdiWGhYWXpGYWMxTnRiR2xTTW1oV1ZsWmFVMk14VG5OVWExcFBVMGRvV1ZadWNGZFZSbEpXV2tVNWFsSnRPVFZhUldRd1ZUQXhkR0ZFVGxoV1JUVjVXa1JDZW1WR2IzcGhSbFpvVFZoQ1dGZFhkR0ZrTVVsNFYyeG9hMlZzV2xoVVZsWmhWMFpWZVdWR1RsaFNNVnBaVmxkNFMxWnNXbk5qUmxKV1RWWndkVnBWV2xkak1WSnpVMnhrVjFKc2NGZFdiWFJYVmpGSmVGZHNaRlJpUm5CWFZtNXdWMWRzV2xWVWJYUnBZa1pLVjFaSGNFOVpWVEZ5VFZSYVYxWjZWbnBaVnpGTFkyeE9jVk5zY0U1TmJtZ3hWMVpTUzFVeFRraFNhMnhTWWxoQ2MxWnJWa2RsVmxsM1ZXdGtWVTFWY0hwV2JUVlBWMGRGZUdOR1pGcGhNVXA2VmpCYVYxWXhaSEprUm1SVFlsWkZlRll5ZEdGU01WWnpWMjVPVkdFelFsbFZhMVpoVmtaYVZWSnJaRmRoZWxaWVZsZDRWMVV4V2xkalJtUlhWak5vV0ZaWE1VdGpNa1pIVlcxMFRtSldTazFYYkZwVFlqSlNWMVJZYUZWaWEzQlFWRlZrTkZOc1VsWmFSM1JhVm14c05sbFZVbUZYUjBwR1RsVlNXazFHY0ROWk1HUkhVMVpHZEdORk5VNVNSbG8yVmpKMFYxUXlTblJTV0d4V1lUSm9iMVV3Vmt0alZuQlhWV3RLYW1KSFVrWlZiWE0xVlRKS1IxZHVjRmROYmxKb1ZtMHhTMUpYU2tkaFJscFhZa2hDVFZadGRHRmhNRFZYWTBWa1ZtSkZjRTlXYkdoRFZFWmFjMVp0UmxaTldFSjZWVEkxUzJGV1NsVlNiRkpYWWtaS1dGVlVSbUZTTVZwelYyMXNhVkl5YUZaWFZsSlBVVEZPYzFScmJGVmlWRlpWV1ZSR2NrMUdVbk5YYms1WVVtMVNXbGt3V25kVWJVcEdZMGhrVjAxdVVuSldiWE40Vm1zeFZsWnNUbGhTTW1oUlZsZDBWMU15VFhoVmJGcFdZbFZhYjFWc1VuTldiRmw1VFZjNVdHSkdiRE5XYkZKRFYwWmFObEp0Um1GU1JVVXhWbXhhVDFkWFNraFNiRTVwWVhwVmVGWnRlRk5STVZGNFZsaG9WV0pIVWxOWmExcGhWMnhTVmxkdVpGUk5WbkJIVm0xNGExWlZNVlpYYkdSVlZteGFhRlY2UVhoV1ZrWjBUbFphVTJGNlZrVlhiR040VlRGa1IxUnVWbXBTTTFKVlZXeGtORTFzVlhsa1J6bFdUV3RzTlZWdGVITldWbVJIVTJ4S1dtRXhTbnBXYkZwWFl6RmtjbVJHWkU1V1dFSlpWbFJKZUZsV1dYbFNXR1JZWWtaS1dGWnJWbUZPYkd4MFpVWmFhMDFXU25wV1IzaFRWakpGZDJOR1pGZE5Sa3BFVjFaYVQyTXhWbkpYYkdSb1pXMTRWRlp0ZUZOU01VbDRWRzVHVTFkSFVuRlVWV1EwVW14V1YyRkZPVlJpUlRWSFZHdG9hMWRyTVhGV2EzaGhVa1Z3UzFwWGVGTlhSVGxXWkVaU1UyRXpRWGxXTVZwaFlqRlNkRlZyWkZKaWF6VlJWbTE0UzFaR1duUmtTR1JZVW14YWVsWXlkREJaVjBwSFkwaHNWbUpZYUZCV2JYTjRWMVpTZFZac1pGZFNWWEJSVm14U1IxUXhXWGhTYms1WFlrZDRUMVZ0TlVOVVJscHlWbXhrVjAxV1JqUlZiWGhoVkd4YVYyTkZlRlZXYkVwRVdsZDRUMVpzVW5SalIzUm9UVEJGZUZkV1VrOVJNVlpJVm14YVZGWkdXbFZXYkdSVFpXeHNjMVpxUWxSU01IQktXVEJrZDFSdFNrZGlSRTVXWld0S1VGWlVRWGhUUmtweVlVZHNWRk5GU2s5V2JYUlRWakpLVjFkc1ZsSmlSMUpYVkZaYWQyVldXblJsUlRsWVZsUkdXRmt3Vms5V01WbDZZVVpDV0ZZelVqSmFWVnBUWTJ4V2MxZHRhRTVpYldoVVZtMHhNRmRyTlZkWGJrNVhZbXR3YjFSWGNGZFhiRnBWVTJwQ2EwMVZOVmRaVldoM1dWVXhTVkZyYUZWTlJrcFlWako0V21WSFNrVlhiR2hYVWxoQ1ZWZFdXbUZrTVU1SFYyeFdVMkY2VmxSVmJGcGFUVVphU0dSR1RsSk5hM0JIVkZaV1YxZEhTbGhoUmtaWFlURndNMWxxUm10V01YQkdWMnM1VTJKWVozZFdha1p2WVRGV1IxZHJXbWxTUmxwWldWUkdkMDVzYkhSbFJscHJUVlpLZWxaSGVGTldNa1YzWTBaa1YwMUdTa2hXYWtaV1pVWlNjMVZ0UmxOTlZYQk1WbGQwVTFFeVNuTmlSRnBWWWtkU2IxWnFRWGhPYkZwWVRsaE9WVkpyVmpSVk1XaHJWMnhhV0ZWdWNHRldNMUV3Vm14Vk1WZEdaSE5YYXpWVFlraENWbFp0TUhoTlJsbDRWbGhvWVUweWFGbFpWRUozVmpGc2NsWlVSbWhXYXpWNFZXMXpOVlV4U25OWGJteGFZVEZ3U0ZacVJrdGpWMHBIV2taa1YwMHhTalZYVnpFMFlqRmFTRlZZYkdGU1ZGWlRWRlJLVTJSV1pGbGpSVGxXVFd4YVdWWkhOVmRWYlVwelkwaEdZVlp0VW5KWk1uaDNVbXh3U0U5WGNGTk5SRkY0VmtaV1QwMUdaRlpOVmxwUFZsZFNXRlpxVG05aFJsWjBaVVprYWsxRWJGaFhhMXBMVmpKRmVsRnNXbGRoYXpWNldWUkdZVkl4U2xsaFJsSm9UVEJLV0ZaWE1UUlRNa3BYVjI1T1dHRXpVbFZaVkVrMVRrWlNWbUZGT1ZSaVJWWTFWa2R3UzFaSFNuUmxTR3hhVFVaVk1WUnNXa2RqVjBwR1kwWk9UbUp0WjNkV1dIQkRZVEZSZVZWdVVsWmlSMmhRVm10V1MxUldWbFZTYTNScFZteEdORmRyVm10aFZscFZVV3BXVjFKNlJYZFdNakZMVmpGT2RWUnNWbWxTYTNCRVYyeFdWbVZHV2xkV2JHeGhVakJhV0ZWc1ZsZE9WbGw0VjJ4T2FtRjZSbnBaYTFwdlZUSktXR0ZHUmxaaGEwb3pXa1ZhVTFac1ZuVlRiWGhYVmtWWmQxWnNXbTlSTVU1elUydHNZVko2VmxWWlZFcHZWa1pzY1ZOclpGaFdiRXBhVmxkNFIyRldTbGxSYTJoWFlrWndhRlpxUms5ak1WcDFVMnhrYUUxV2NHRldSbHBoV1ZaYVIxWllhRmhoZWxaeFZXeGtORk5zYkRaVGJYUm9ZbFZ3V0ZZeGFHdFpWa3AwWVVWNFlWSnNXbnBWYTFwM1VqRldjMVJzWkdoTk1FcGFWbXhrTkZsV1RYaGpTRTVVWW10d1ZGbFVUa05XYkZaelYyMUdVMkpGTlRGWk1HaDNXVlV4YzJOR1ZsWldlbFo2VjFaYWExSXhUbGxoUm5CT1lXdEdNMVl5Y0VOa01VbDNUMVZXVjJKSVFsaFVWbVF6VFd4WmVGVnJkRlpOYTFwWVdUQldiMVl4V2taWGF6bFdZVEZhV0ZScldsTmpiRlp5Vkcxc1UxWkZXa2RXYWtsNFlqRldSMWRyWkdwU2VteFpWbTB4VTFJeFVuSlhiazVyVW0xU1dsZHJXa05XTVVwWVpIcEdWMDF1VWxSYVYzaDJaVlprYzFWc1NtbFdSVnA1Vm0wMWQxWXlUbGRqUlZwaFUwVTFjbGxzVm5ka01WWllZMFYwV0dKR2JEWlpWV2hyVjBkRmVWVnJhRlZXVm5BelZtdGFkbVZYVWtkaVIzaHBVbXhXTkZacVJtRmhNVlp5VFVoa1RsWnRhRmRXYTFaaFZVWnNjMWRyZEdwU2JFWXpWbGN3TVZSck1WaGtla3BXWWtaS1JGWkVTbGRqYkZwVlVXeFdUbEl4U2xCV1JscFdUVlprUjFwSVVrNVdia0p6V1d0V1YwNUdXWGxOV0dSWFlsWmFlbFZYZUc5WFIwcFlZVWhDVmsxR1ZYaFpla1pUVW14U2NsTnRhRTVXTW1ONVZtMTRVMVl4VmtkWGExcG9UVEpvV1Zsc2FFTmxiR3hZWXpOa2JGWnJjREJhUlZwRFZURkpkMDVFUWxkU1JWcFVXVmR6ZUdOck5WbFZiR2hwVmtWYVVWZFdaRFJTYXpGSFZXeFdWR0pHY0ZCVmJGSldUV3hXVjFWcmRGaGlSbkJJVm14b2ExWnNTblJWYldoYVZsZFNURlV4V2xOa1IxWkdUVlpLVGxKV2NEVldha0pUVXpGV2RGVllaRTlYUmtwWFZtdFdZVlZHV25GU2EzUnJVbXhLV0ZkcldtRmlSMHBJWkVSV1YySlVSVEJXUkVaTFUwWldkVlZzVmxkTk1FcFZWMVprTkdReFNsaFNhMmhzVW10S1dGUldaSHBrTVZwSVRsaGtWV0pXV2xkVU1WWlhZVWRXYzFOc1NsZFdSVXA2V1RCYVUxSnNVbkpUYldoT1ZqSmplVlpyV205ak1WRjRVMWhrVjJGc1dsWlVWbHBMWlZad1ZsWllhRk5XTUZwSldsVmFkMVl4U25KV2FrNVhVak5DVEZaVVNrdFdNa1Y2WWtaYWFWZEdTbEZYVm1ONFZHMVdWMXBJVW1wU1YxSndWbXhTUjJWR1dYaFZhemxZWVhwR2VsVXlOVTlXYkVweVRsVjBXbFpzV1RCVmExcEhWMGRTUjJKRk5XaGxhMGt3Vm10amVHUXhVblJXYms1cFUwVmFZVlJVU2xOaFJteFlaVWhrYW1KR1NscFpNRnByWVZaS1ZWWnNiRmRpUmtwSVZqSnplR05yTVZWV2JGWlhVbGhDU1ZkWGVGWmxSazVIVjI1U2ExSnJTbFJVVlZKWFpERmFTRTVZWkZKTmExWTBWVmQ0VTFaR1drZFRhemxXVmtWS2VscEVSazlXYlVaSlkwZEdUbE5GU2t0V2JHTjNUbGRHUjFwRldrNVdSVXBYVldwT2FrMVdiRmhOVldSVVVteHdNRmt3Wkc5VWJGcElaSHBLVjAxdWFISldSRUY0VjBaU2RWVnNaRmRsYlhoT1ZtMTBiMVF5U25OVWJrcFlWa1pLY2xSVlVsZFNiR3hXV2tjNVZVMVdiRFJWTWpWVFZsVXhXRlZyYUZwV1JVWTBXa1ZhWVZaV1RuSk9WVFZvWld4WmQxWnFTalJoTVU1eVRsVmFUbFpYYUZSV2ExWjNZVVpXY1ZGVVJtcGlSMUpZVjJ0Vk1WUnJNVVZTYTJ4WFVteEtXRlpITVVkV2JFcFZWbXhTVjFaVVZqRlhWbFpYWkRGSmQwOVZWbE5pUlVwWVZGVmFkMlZXV2toT1dHUlRUV3RXTTFSc1dsZFhSMHBaVlcxR1dsWjZSbkZVVlZwVFkxWk9jazVYZUZOV1JscEhWakZTVDJJeFZrZFRhMmhvVTBWYVZsbHJXa3RYUm14elYyNWthMUpzU2xaVlYzTTFWakF4V0dSRVVsZFNiV2g2V1RKNGRtVkdSbkZXYkVwb1RVWndiMWRYZUd0T1IxWnpXa2hPV0ZaR1duQlphMmhEVjJ4YVdFMVhSbGhoZWtaNFdXdFNSMWxXU2xoVmJHaGhVbTFTVkZVeFdsTlhSVGxXWkVaU1UyRXpRWGxXTVZwaFlqRlNkRlZyWkZKaWF6VlJWbXhTUjFaV1duTldWRVpUVFZad1NWcFZWVFZWTWtwSVdrUlNWbFl6VWt4V2FrWkxWMFp3U1ZwR1VsZFdhMjk1VmpKd1EyUXhTWGRQVlZaVFlrVktXRlJWV25kbFZscElUbGhrVTAxclZqTlViRnBYVjBkS1dWVnRSbHBXZWtaeFZGVmFVMk5XVG5KT1YzaFRWa1phUjFZeFVrOWlNVlpIVTJ0b2FGTkZXbFpaYTFwTFYwWnNjMWR1Wkd0U2JFcFdWVmR6TlZZd01WaGtSRkpYVW0xb00xcFhlSFpsVmtwellVWm9WMlZ0ZUhoV1JsSkhVekExVjJKSVNtRlNiVkp5Vm14b1UxSldXbGhOVjBaVllrVndTRlZzVWtOWFJscHpVMnhvV2xaRldqTlpNV1JMVTBkR1NGSnNUbE5YUlVvMlZtdGplR1F4VVhsU2JrNXFVMFpLV0Zsc1pEUlZWbFp5Vm10MGFVMVdTakJVVmxwUFlVZEtTVkZyYkZaaVZFWXpWa1JLVjJOc1RuVlNiRlpPVm10d1RGZFVRbUZSTWs1WFVteHNVbUV6UWxWVk1GVXhaRlpWZVdSR2NFOVdNRnA2V1RCYWIxWkdXa1pUYXpsYVZqTlNWMVJXV210V01YQkdZMFU1VjFaRlZYbFdiR040WkRGa2MxZFlhRlJpYTFwV1ZtMTRTMVl4VW5KV1dHaFBZa1pLV2xrd1pFZGhWbHB6WTBoa1YxSkZXbFJaYWtwSFl6Sk9SbFpzVGxkU1ZGWm9WbXhTUTFKck5WZFViRnBWWWtVMVQxVnFRbUZUVm14eVlVaGtWVlpzY0VaV2JUQjRXVlpLZEZSWWFGVldSWEJRV2tWYVMyUldjRWRpUlRWcFlsZG5lbFpxUmxOVE1WbDVWV3hvVlZkSGVGaFdibkJ6VkVaV2RHTkhPVTVOVmtwNVZsY3dOV0ZHU2xWV2JHeFhWbnBDTkZaVldscGtNV1IxVTJ4V1YyVnJXbGhXUm1SNlpESldWMVZ1VWs1V01GcFlWRlZrZW1ReFdrZFdiWFJUWVhwR2Vsa3dWbTlXVjBwWlZXMUdWMkZyUmpOYVYzaFRWbXh3Ums1Vk9WZFdSVm96VjFab2QyRXhUbk5UV0d4c1UwWktWVlJWWkZObGJIQllaVWMxYkZacmNERlphMlIzWVZaYVYyRXphRlpsYTBwUVZsUkdkMk15UlhwaVJtUnBWak5vVVZaWGRGZGpNRFZIVlZob1lWSlhVbTlXYkZKelZteGFSMVZyVGxoaGVrWjVWakkxUzFkR1pFbFJhMlJWVm14Vk1WVnNXbE5YVjA1R1RsVTFhVk5GU2paV2FrWnJaREpPY2s1VlpHaE5NbmhYVmpCa2IxVkdVbGhrUm1SclRWVXhORlpIZEU5VU1ERklaVVZzV21FeVRqUldSVnBHWlVaT2RFMVdhRmRTV0VKWlYxWmFWazFXU2xkVWJHeG9VbXRLV0ZSVlduZGtNVnBGVW14T1ZXRjZSa2haVkU1elZUSktXVlZ0Um1GV00xSlhXbFZhVW1ReFZuSk9WM2hvWld0Sk1WWnFTWGhPUm1SMFVtNVNhbVZyU2xsV2ExWjNWVEZ3VmxaVVFteFdhM0F3VlRKME1GUnNTWHBoUldSV1RXNUNSMXBFUm5aa01rcEhWbXMxVTAxc1NuZFdiWEJIVW0xV1IxUllaRlZpUlRWUFZXcENZVk5XYkhKaFNHUlZWbXh3UmxadGREQldiVVY0VTJ0a1drMUdXWGRXYTFwSFkxWndSbU5HU2s1V1dFSXdWbXBHVTFNeFdYbFNiRnBQVmxaYVZWWXdaRzlWVmxweFVXMUdhbEpzUmpSV1YzTXhWR3hLZEdSRVZsWmlWRVYzVmpJeFYyTnNXbGxoUmxaT1VtdHdVRmRzWkhwa01sWlhXa2hTYkZKdVFtOVpiR2hPWkRGWmVGVnJkRlppVmxwSFZHdG9jMVV5U2xaalJYaFZWbXhhTTFWcVJtRldWa3B6V2taV1YySklRa1pXTW5SclZURk9jMU5yVmxKaVZGWlZXVmQwUzFWR1dsWlhiR1JxVFZVMWVsWXllR0ZWTWtwR1YycEdWMUpGTlhwVlZFRTFWbTFLUm1GSGJGTmxhMXBPVmxaU1IxTnRVWGhpUmxwaFUwVTFjMWxVVG05V2JGSnpWMjFHVjJGNlJraFdNakI0VmpKRmVGZHVjRmRTTTJoTVZtdGtSbVZXY0VobFIzaFhWbGhCZWxacVNYaGpNa3AwVWxob1lVMHllRlpaYkdodldWWnNXR1ZGWkU5V2JFcFlWbGMxVDJGR1NuUmxTR2hhVmtVMU0xWkVSa3BrTURWWVQxWm9hRTFzU2xCWGJGWldUVlphVjJJemNHcFNWRlp6V1Zod1YwMUdXWGxsUjNSVVlYcFdWMVF4Vm05V1YwcFpWV3M1VjJFeVVsUlpha1phWlcxS1NHUkdUbGRoTVhCWlZteGtNRmxXVFhkTlZsWlRZbGQ0VlZsWGRHRlZSbHB6VjJ0a1YwMVZOWHBXYlhRd1ZHeGFSbE51VmxkV1YxSjZWVlJCZUZOR1NuTmhSVFZYVFRKb1RsWldVa3ROUjFaWFZHNUthRkpyTlhCVVYzUmhWMnhhUjJGR1RsWldNSEJIVkd4YVlWWnNXbk5qUlhoWFlrWndkVnBFUmxkamJVNUhWRzFvVjAweFNqRldNbmh2WXpGR2RGSllhR0ZOTW5oV1dXeG9iMWxXYkZobFJXUlBWbXhLV0ZaWE5VOWhSa3AwWlVob1dsWkZOVE5XUkVaS1pEQTFXRTlXYUdoTmJFcFFWMnhXVmsxV1dsZGlNM0JxVWxSV2MxbFljRmROUmxsNVpVZDBWR0Y2VmxkVU1WWnZWbGRLV1ZWck9WZGhNbEpVV1dwR1dtVnRTa2hrUmxwT1ZsaENXVlpyWkRSWlZscFhVMjVPVTJKc1dsbFZiWE14VVRGUmVGWnVUbE5TYmtKSVZtMTRWMVl4V1hwaFJrWlhZbGhvYUZaSE1VdGphemxWVm14S2FHSllhRXhXVjNCTFRrZFNSMVJZWkZWaVJUVm9XV3RrTUU1V1duUk5XRTVWVFZWd1IxbHJVbE5XVlRGWVZXdG9XbFpzVlRGV2JGcFRWbFpHYzJORk5XaE5XRUkxVm1wR2IyUXhTbkpOVmxwUVZsWmFWbFl3YUVOVU1WSllaVWhrYWsxWFVsbFpNR2hMVkRGS2RHUkVWbGRXYldoMlZrUkJlR05zWkhSaVJsSm9ZVEJ3VlZaV1pEUlpWa3B6VjJ4b1QxWnRlRmhaYlhNeFRWWmFXR1ZHV2s1V2EzQlhXV3BPYjFSc1RrZFRia3BXWVd0dk1GUlZXbXRqTVZKMFRsZHdVMVl6YUVkWGExSkxZVEZTYzFKWVpGTmliRXBWV1d4a05GRXhiRlZTYlRWc1ZteEtNRnBWV25kaFIwcEdWMVJHVjFKc2NGUlpla3BIVWpKS1NWSnRhRTVOTUVwUlZsZHdRazFYU1hoYVNFcGhVbFJXYzFWc1VsZFdiR1J4Vkc1a1ZXSldXbmxVYkdoVFYwZEtTRlZyZEZWaVJsVXhWVEJhVTJSSFVrWk9WbVJUVFZWd01sWnRjRTlqTWtWNFUyeGtVMkpIVWxkWlZFWjNWRVpTVjFWclpHaFdhelY0Vlcxek5WWnNXbkpYYkdSVllUSk5lRll4V2xaa01VcDBUMVphVTJGNlZrUlhWekUwVlRKT2MxZHVUbUZTYXpWWVdWUktORTFXVmpaU2F6bFNUVVJTTTFsclZsTldiVXBYWTBkR1ZWWXphR2haTUZwVFkyeFdjbU5IZUZOV1IzaGFWbGN3ZUdNeFZrZFhhMXBPVTBkU1dWWnJWbmRUUm14VlVtNU9UMkpGY0ZaVmJYaERWVEZLVlZKVVNsZFNiRXBNVjFaa1MxSXlTa2xTYldoc1lrVndhRlpHWkRSU01EVkhWVzVHVkdFeVVtRlpWRWsxVGtaVmVXUkhSbGRoZWtaWVZqSnpNVll5UlhkT1dFcFlZVEZhZWxWc1ZYaFRSbkJHWkVVMVUySklRbWhXYlhoWFZqSk5lRlpZYUZSaVJuQlhWbTV3VjFWV2NGZFdhM0JQVm1zMVYxWkhlRTlaVjBwSVpFUldWMkpVUm5wV1JFWkxVbTFLUlZWc1ZrNVdNVXBKVjFaYVZrNVdXbGRWYkZaU1lraENUMWxVUm5kbFZsbDRZVWhrVTJGNlJsZFVNVlpYVmxaa1NWRnJPVlZXTTJneldYcEdhMWRIVGtsVGF6bFRZbGhSTVZac1dtOWlNVkYzVFZoS1dHSlhlRlZaVjNSTFZrWldXR1ZIUmxOaVJuQlpWR3hhYzFZeVNuSk9WRVpYVmtWS2FGWnFSbE5qTVVwelYyczVVMlZzV21GV2JUQXhWREpTVjFkc1ZsTmlSVFZUV1d0YVlXVnNXbGRaZWtaWVZteFdNMVZzVWxkV1JscFlWV3hTV2xaWFVsUlZNRnBoVjBVNVZtUkdVbE5oTTBGNVZqRmFZV0l4VW5SVmEyUlNZbXR3VjFsVVFuZFhSbFp6VjIxR2FWWnNjRlpWYlhoUFZtc3hWazVXWkZWaVJscDJWa1phUm1ReFNuVlRiR2hUVWxoQ1VWZFhkR0ZqTWs1WFZteHNhVkpVVmxoVmFrNXZaR3haZUZwSVpHcGlWbHA1Vkd4V2IxWlhTbGhoUjJoV1lXdEdORlJyV2xOak1WWjBUbGQ0YUdWclZYbFdhMk4zWlVac1YxZFlaR2hsYTFwV1ZGVmtVMVZHYkZWUldHaFhWbTVDU1ZsVldtOWlSbGw0VTJ0a1YxWnNjR2hXVkVaTFkyMUplbUZGTlZkTlNFSk5Wa1phVmsxV1duTldiR1JZWVROU1dGWnNZelZPUmxKV1lVVk9WbEl4V2xkVmJUVkxWMFpLUm1OR1FscGhNWEI2V1RGYVYxZFhTa1pPVm1SVFRUSm9NbFpxUm10a01rNTBWbTVLVDFaWGFGWlpiR1J2WVVaV2NWRllhRTlTYkVwNlZsY3dNV0pIUmpaU1ZFcFhVbnBDTkZkV1dscGtNa1kyVW14V1RsSXhTbEZYVmxKQ1pVWmFWMk5GYUdoU2JXaHpWbXBHUzFJeFdsZFhiVVpXVFZWd2VWbHFUbTlVYkZsM1kwVjRWVlpYVW5aV2FrWmhVakZhY2xwR1ZrNVNlbXN3VmtaYWExTXhUWGROVldSWVlrVktWMWxVUVRGamJHUnlWbTVPVTFaVVJrbFhhMlJIVlRBeFIySkVUbGROYm1oUVdXMHhSbVZXVm5KaFIyaFVVbFZ3ZUZkc1dsTlJiVTV6Vm01S1YyRXlVbGhXYlhSM1YwWlJlRmRzVGxkTlZYQjVXVEJXTUZZeFNYcFZia1phWld0S2VsVnJXbGRrUm1SelkwVTFhVkp1UWpOV2EyUXdWVEZPZEZacldsQldiV2hVV1d4a05GVldXbkpXV0dSclRWZFNWbFV5ZEd0aFJURllaSHBLVm1KR1NraFdWVnBMVW1zeFZWZHNWbGRTV0VKdlYxZDBZV015VGxoU2FscFdZa2hDVDFsclZscE5SbHBJWTBWMFUwMVhlSGxaYWs1clZtMUZkMk5HYUZaaVJuQllXa1phYTFJeFpIVmpSMnhwVWxoQ1dGWkhlRmRXTVUxM1RWWldVbUp0VWxaVVZFbzBVa1pSZUZadVRsUlNNSEJKVkZaV05GVnJNVlppUkU1WVZteGFjbGw2U2xkamJWWkhWbXM1VjJKSVFsaFdSbFpoV1ZkS1YxZHNWbEppUjFKWFZGWmFkMlZXV25SbFJUbFZVbXhXTTFVeFVrOVdSbHBXVGxaU1dHSllhRE5hUlZwTFYxZE9SazVXWkZOTk1tZDNWbXBKZUdReFdYbFRiRnBPVjBaS1ZsWXdaRk5WUm5CWVpVWmtUMUpzU2xsVVZscGhWR3N4UlZKVVNsZFNiRXBJVmtSR1MxSXhUblZVYkZaWFlsWktiMWRXVmxaTlZtUkhWbXhXVW1KSVFtOVpiRlV4WkZaYVZsZHJPVkppVlZZMVZsZDBiMkZHVGtaVGJrWmhWbXhLUTFreWVHdFNWazV5VDFkMGFWWllRbUZXVm1ONFlqSkdkRk5zWkZoaVZFWlpXVlJLVGsxV2NFWlhiazVZVWpCd1NsWnRkRFJWYXpGV1lrUk9XRlpzV25KWmVrcFhZMjFXUjFack9WZE5XRUpZVmtaV1lWbFdXa2RYYmxKclVtMVNWMVJXWkd0Tk1XeHlWbFJXVmsxcldUSlphMlJ6VmtkR2NsTnVXbGRpUm5Cb1ZXcEdSMlJHWkhOVmJFNVhVak5vVjFadE1UQlVNa1Y0WTBWYWJGSldTbE5XYWs1VFYyeFNXR042Um1wTlYxSlpXVEJhUzJKR1dsVlNiRnBhWVRKU2RsWXlNVWRrUjFKRlYyeFdhRTFzU2xGWFZsWmhaREZPUjFWc2JHaFNWR3hZVldwS1VrMXNXa2RoU0dSVlRXdHdXRmt3V205V1JscEhWMnhHVm1GclJYaFpNbmhUVmpGV2RHUkhhRk5pVmtWNFZqSjBZVlV4VlhoWGJrcHFVbTFvVjFsclduZFRNV3gwWlVjNVYwMXJNVFZVYkZwUFZURmFTR1ZHUWxkV2JIQllXWHBHVW1ReVNYcGhSVFZVVWxWd1VsZHNXbGRUTWxGNFdraFNhVko2Vm05VmJHaERVMFpSZUZremFGaGlSbkJIVkZaU1UxWlZNVmhWYldoYVlrWlZlRll3V210WFYwcEhZMGQ0YUUxR1dUSldhMlEwVlRGS2RGWnNaR3BTYkZwaFZGUk9RMVF4Y0ZobFJscHJUVlpLZVZkcldtRmlSa3AxVVdwQ1ZtSkdTa2hYVmxwTFVqRk9kVkZzVm1saVdHZzFWakp3UzFZd05WZFNiR2hyVW0xNFQxbFljRmRsYkZsNFdraGtWbUpXV2xkVVZscFhZVlpKZVdGSFJscFdla1YzVkcxNFUyTnNjRVpQVjJoVFltdEtTbFpyV205aU1WRjRWMnRvWVZKR2NGWldNR2hEVlVac2MxZHVaRmhTYXpWV1ZtMTRRMVV3TVVWV2JteFhVbXh3VkZsVVNrZFNNWEJGVm0xR1UyRjZWbFZXYlRGNlRWWlplRmRyV2xoaVJYQndXV3RrYjFaV1ZsZFZiazVVWWtWV05WWlhkREJXTVVwWFYxUkNWbUpZYUV0YVJFWkxZMnN4Vm1SSGVHbGhlbFl4VmpJeE5GUXhSblJTV0dob1VrWndXRlpyVlRGVlZsWnlWbTVLYkdKR1NsaFhhMVl3WVVaS2RWRnNXbGROYWtaMlZrUktSMk5zU25GWGJHaFlVMFZLTWxkV1dsWmxSVFZ6Vlc1U2FWSlVWbk5aVkVvelRVWlplRmR0ZEZSaGVrSXpWRlpTWVZZeFdrZFhiRVpXWVd0RmVGcEZXazlXYkZaWldrZEdUbE5GU2t0V2JHTjNUbGRHUjFwRldrNVdSVXBYVldwT1UxTkdXa2RYYkU1VFlYcHNXRmxWV25OVWJFNUlZVVpLVjFac1NrUlZha1pUVm0xS1JsVnNhRmRsYTFwTVZsWlNTMkl5VVhoaVNGSnJaV3hhYjFWcVFURk5WbFY1VFZjNWFWSnNWalZYYTJoWFZsWmFjMU5yZEZWV1JVa3dXVEZhUjFkV1duSk9Wa3BzWWtWcmQxWlVTVEZqTURCNFlqTmthbEpYVWxGV2FrNURZVVphY1ZGdVNtdE5Wa3BaV1RCV1lWUXhXblJsUm14V1RWWktXRlpITVZkak1VNTFVbXhvVjJKV1NsVlhWbVI2WlVaYVYxZHNWbFpoZWxaeldWaHdSazFzV1hsTlNHaFhUV3RhVjFReFdsZGhSa2w2VVcxb1ZtRXhXbGRhVjNoclZqRmtkV05IYkdsU2JGbDZWbTB4TkZReFdYbFNXR2hZWWtaS1ZWbFhkRmRPUm1SWVpFaGFhMDFyY0VoVmJYUXdWR3hhUmxOcVRsWk5WbHAyVkd0Vk5WSnRTa1pWYkZwcFZtNUNhRlpHWkRSWlYwNUhWVzVLVm1FelFuTlZiRkp6VjFaV2RFMVlUbFpTYkhCSFZGVm9hMWRHV2taalJXaGFWa1ZhZWxSdGVFdFdWa3B6VVd4T1UxWkZWWGxXYTFwVFV6RnNXRk5yWkdsVFJWcHZXbGQ0UzFsV1VsaGxSV1JQVW14S2VGVXlkR3RYYlVWNVQxUlNWbFl6VWt4V2FrWkxWMFp3U1Zac2FGTmlTRUV5VjFjeE5GWnRVWGhYYms1VllrZFNiMVJXV25kV1ZsbDNWV3RPVTAxVmNGaFZNblJyVmtaYU5sWnNjRmRXUlVwSFZHeGFWMUl4VW5KVGJXeG9aV3RhVjFaVVJsTlVNVkpZVW01S1UyRnJXbFpXYkZWM1pERndWbFp1WkU5V2ExcDRXVlZqZUZWck1VWlhibXhYVFVaS1RGWkVTa3RTTWtwSlVteGFXRkl6YUZCV2JYUnJUa2RKZUZwR2FHcFRSWEJ6V1Zod1YxTldXa2hOVnpsYVZtdHNNMVJXVWxOV1YwcEhVMjVXWVZZelRqUlViWGhUWkVVeFdGSnNaRTVTTTA0MFZtdFNRMkV4VVhsU1dHUk9WbXhhYUZWcVNtOVhWbkJYV2taT1ZtSkdXbGhXTW5oUFZrWmFXRTlVVWxWV2JWSk1WWHBCZUZOSFJrZFhiR1JvVFZoQ1JWWXlNVFJVTVVweVQxWmtWbUpIVWxOVVYzaExZMnhWZUZac1NtdE5SR3hYV1d0V1UxZHJNSGxoUlRsYVZucEdVRlJXV2xOV2JGSlZVVzEwVGxOSGFEUldWM2hxVFZaU1IxZHJiRlZpVkZaaFZtMHhVMWxXYkhGUmJrNVhVbXhhTUZZeWN6VldNVWwzVFVoa1YxSnRVak5aVnpGWFVqSktTVlZzVG1sWFIyaFJWMWQ0VjFadFZsZFZiRnBXWVhwc2IxbFljSE5UVmxWNFlVaGtWV0Y2Um5sWmExSmhWbFpaZWxGcmFGcFdWbkI2V1RGYWNtVnRUa1pQVm1SVFRUQXhNMVpxUmxOVE1XUjBWR3RhYVZKWGVIRlVWekZUVkVaV2RHTklUbXBXYlZKNlYydFdkMVJzU2xWU2JtaFdZa1pLV0ZZeWVGcGtNa1kyVW14V1dGTkZTbFZYVm1RMFl6RmtSMVp1VW1wU1ZGWllWVzE0Vm1ReFdrZGhTR1JWWWxaYWVsa3dhRk5XTWtwWVpVWkdWMkV5VW5aWk1WcHJZMnhXY2xkck5VNVdNMmhaVjFod1NrMVdXblJTV0doWVlrWmFXRmxyV2xwTlJscHpWbTVhYkZKVVJrbFhhMXBIVm1zeFJsZHFSbGRXUlZwWVZHdGFVMVl4VG5OWGJVWlRWbGhDVjFaWE1YZGpNVkp6VjJ0V1VtRjZiRk5aYTFwTFVsWmtXV05IZEZSaVJUVkdWVmN3TVZsWFNrWk9WVkphVFVad00xa3dXa2RYUlRsWVlVWm9VMVpHVlhsV2FrbzBZakZXZEZOWVpHcFNWMUpSVm1wT1EyRkdXbkZSYmtwclRWWktXVmt3Vm1GVU1WcDBaVVpzVmsxV1NsaFdSekZYWXpGT2RWSnNhRmRpVmtwVlYxWmtlbVZHV2xkWGJGWldZWHBXYzFsWWNFWk5iRmw1VFVob1YwMXJXbGRVTVZwWFlVWkplbEZ0YUZaaE1WcFhXbGQ0YTFZeFpIVmpSMnhwVWxoQ1NGWlhNVFJXTVZaelZsaHNWbUpZVWxoVVZFbzBZMnhTVmxwR1pGaFdhMW93V2xWV01GUnNXa1pUYWs1V1pXdGFVRlZVUVRCa01rcEdZVWRzVTJWcldreFdWbEpMWVRKT2MxcEZWbFJoZW14d1ZXMHhOR1ZHV2xkaFNFNVZZa1p3U1ZwVll6VlhSbGw2VVc1c1lWWXpUWGhWTUZwVFpFZEdTRkpzVGs1U1JWVjNWbXRrTkZVeVNuUldia3BPVmtad1ZsbHNVa2RoUmxweFVXNUtUbFpzUmpOWGExVTFZVVV4UlZKc1dsaGhNbEoyVmpCa1YxZEdWbkpYYkZwWFlraENWVlpXWkRCa2JWWkdUVlpvVkdFelVrOVVWbFp5WlVaa1ZWRnRkRmRpVlhCNldWVmFVMVZzV2tobFJrcFhWa1ZLU0ZwR1duZFNiVVpHWkVkd1UySllhRnBYYTFKS1RWWlNSMVpZWkZSaWJWSlpXV3hrTkZFeGJIRlRhMlJZVm14S01Wa3daRWRYUmtweVYycEtWazF1VW1GVWJHUkhZekpPUjJGR1VsZFNWWEJRVjFaa01GWnJNVmRhUm1SaFVsaENVRlpzVWtaTmJGcFlUVmhrV0dKR2JEUlZNalZIVmxaYWMxTnNaRlZoTVZZMFZHMTRVMWRYVGtoU2JXeFhZa2hDTTFaclVrZFZNa2w1VW01T2FsSldXbFJXYTFVeFdWWmFkRTVWT1d0V2JIQlpXa1ZhYTFZeFNuTmpSbVJoVmxad1dGVjZRWGhXVmtaMVdrWlNWMVpVVm1oWFYzaFhZekZLUjFadVVsaGlTRUpQV1d0YWQyUXhXa2hrUms1VVlsWmFSMVF4V205Vk1rcFlaVVpHVjJFeFZqTmFSRVpyVmxaT2NscEhhRTVXTTJONVZsZDRVMUl4VmtkVGExcE9Wa1p3VmxaclZuZGhSbXh5VjI1T2FsWXdXVEpXVjNoM1ZHMUtSbGRVUWxkU00wSk1WV3BHYzJOdFNYcGhSbEpvVFZoQ1dGWkdXbUZaVmxKelYyNUtWV0pZVW1oVmJHUTBVbXhTVmxWdVRsUmlSVlkxVmxkME1GWXhTbGRYVkVKV1lsaG9TMXBFUmt0amF6RldaRWQ0VjAweFNqRldNbmh2WXpGR2RGSllhR0ZOTW5oV1dXeG9iMWxXYkZobFJXUlBWbXhLV0ZaWE5VOWhSa3AwWlVob1dsWkZOVE5XUkVaS1pEQTFXRTlXYUdoTmJFcFFWMnhXVmsxV1dsZGlNM0JxVWxSV2MxbFljRmROUmxsNVpVZDBWR0Y2VmxkVU1WWnZWbGRLV1ZWck9WZGhNbEpVV1dwR1dtVnRTa2hrUmxwT1ZsaENXVlpyWkRSWlZscFhVMjVPVTJKc1dsbFZiWE14VVRGUmVGWnVUbE5TYmtKSVZWZDRVMkpHV1hkTlNIQldUVlphZFZwRVJuWmxWbVJ6Vld4S2FXRXdjRzlYVmxwcllUSkplR0pHWkdoU1ZHeHpXV3RvUTFkc1dsZFplbFpVVFZWd2VGbHJhRWRYUjBwSVZXdDBWVlpXVmpSWk1WcExWbFphYzJOR1pFNVNNMDQwVm10YWIyUXhWWGxTYms1cFVtMW9WMWxzYUVOVU1WcHlWMnhhVGxKc1NscFpNRlV4WWtkS1NWRnFRbGRpVkVaNlZsVmFZVk5IUmtsU2JHaG9UVlZ3U0ZaR1VrZGpNVmw1VkZoc1QxWnNjRzlVVmxwM1ZteGFkR1ZHWkU5U2JIQlhXV3BPYjFSc1RrWlRhekZYVmtWS1MxUlVSazlXYkhCSlZHMXNWMWRHU2taV2JHTjRXVlpSZUZkcmFHcGxhMXBXVm1wT1ExZEdiSE5XVkZaWVVteEtXbGt3V25kV01ERldWbGhrVjFKNlZqTlZiWE14Vm1zMVZWZHNhRmRTV0VKdlYxZDRZV050VmxkVmJrcFdZbFJXYzFscmFFTldiR1IxWTBVNVZXSkZjRWhaTUdNMVZsZEtSMU5zVGxwTlJscDZWVEZrVG1WV2NFWmtSazVvWWxob01sWnJaREJoTVZKeVRsVmFUMVpXV205VmFrNURWREZzV0dNelpHeFNiRW93V1RCa1IyRkdXblZSYkZwWFlrWktSRlpIZUVwa01XUjFVV3hvVjAwd1NrUldSM1JoWkRGS1YxZHNWbE5oZW14dldWUk9RMlJzV2toalJYUlVZbFphV0Zrd2FFTlZiRnBJWlVWMFZtRnJTbWhVYkZweVpWVXhWbHBGT1ZkWFJrcEdWMVpvZDJFeFRuTlNXR2hVWWxSR1dWWnRlRXRXUm14WVkzcFdVMVpzV2xaV1YzaDNZa2RGZVdSNlNsZFNNMmhVVmpKemVHTXlTa2xWYkdSWFVsWndVVlpYZEZkVE1rbDRXa1pvVGxaWVFuSlVWVkp6VTFaYVYxVnJaRlZOVm5CSVdXdFNWMWRHV25OVGJrcGFWbXhXTkZwRldtdGtSazV5WkVVMVZGSXlhRTFXYkZwVFVURlplRlZZYUZkWFIxSllXV3hhZDFaR1ZuTldiVVpYWWtaYVdGWkhNVEJaVmtwWVpVVmFWVlpYVW5KVmVrWkxZMWRLU1ZKc2FHbFNNVXBNVmtaV1ZtVkhUbGRUYkZaWFlraENXRlJWWkhwbFJscEhZVWhrVmsxclducFphMXB2Vm0xS1dWRnJPVmRoTVhCWFZGVmFVMWRYVGtaT1YzaHBVMFZKZDFadE1IaGpNVlpIVjJ0b2FGTkZXbGxaVkVaTFVqRlNWVkp1VGxkV01ERTFWMnRXTUZVeVJuUmxTRnBYVWpOU2NsWkhjekZTYXpWV1ZtMW9VMDB3U2xCWFZtUjZaREpXUjFWdVVtcFNNRnB2Vm0wMVExWnNXbk5WYTA1VllrVnNNMVl5TlVOWFJsbDZVV3RPVldFeGNETlZiRnBoVmxaS2NrOVhhR2hOTUVveVZtdGtkMU14VG5SV2JHUnFVMFUxY1ZSWGNGZFdiRlp6V2tSU1UxWnNXbnBXYkZKSFZqRktjbU5HYUZWTlZscFlWbGQ0WVdNeFRuSlViRkpvWVRGWk1GWXhaREJrYlZGNVZXdGFXR0pIYUZkVVYzaExZMnhWZUZac1NtdE5WemsxVlRKNGIxWnNXa1pYYXpGV1ZrVmFURmxzV2xOV2JGWnpVMnM1VTJKWWFGZFdiVEI0VFVac1dGSnVVbXhTZW14WldWUkdTMVJHYkhKV1ZFWnFWbXhLTUZrd1pFZGhWbHB6WTBoa1YxSkZTbFJWVkVwSFVtczFXVlZzV21sWFJVcHZWbGR3UTFsWFRsZFZibFpxVWxVMWIxbFljSE5XYkZWNFlVVk9WbEl4V2xkVmJUVkxWMFpLUm1OR1FscGhNWEI2V1RGYVYxZFhTa1pPVm1SVFRUSm9NbFpxUm10a01rNTBWbTVLVDFaWGFGWlpiR1J2WVVaV2NWRllhRTlTYkVwNlZsY3dNV0pIUmpaU1ZFcFhVbnBDTkZkV1dscGtNa1kyVW14V1RsSXhTbEZYVmxKQ1pVWmFWMk5GYUdoU2JXaHpWbXBHUzFaV1dsaGxSMFpWVFZad2VsWlhkR3RXYkZvMlZteHdWMVpGU2tkVWJGcFBWbXhTYzFSck5WTk5SbkJLVjFkMGIyUXhVbGRYYTFaWFlsUkdXVlpyVm5kVFJtdzJVMnQwVTAxRWJGbFVNV1J6VkcxR2NsZHVjRlpsYTBwUVZsUkdkMk15U2tkV2JGcHBWMFZLVWxaWGRHRlNhekZIV2tac2FsSllRbk5aV0hCWFZteFplRlZyZEZoaVZYQllWbXhvYjFaWFJYaFRhMUphVmxad2VscEZXazlYVm5CSFVXeE9UbFpXV1RCV2EyUTBWVEZrZEZac1pHbFNiRnBvVldwS05GUXhiSE5YYms1c1lrVTFWMVpIZUU5WlYwcEpVV3RhVmxac1NreFhWbHBMVWpGYVdXRkdhR2hOYkVwb1YyeFdZV1F4V2xkVmJsSnFVakJhV0ZSV1dsZE5NVnBJWTBWMFdHSldXbGRVYkZadlZsZEtXVlZzUmxaaGExcFhWRlphYTJSSFRraE9WVFZPVWtWVmVWWlVSbE5WTVZaSFYydG9ZVk5JUWxWV2JGVXhWa1prZEdNemFFOWlSVFZXVlZkNGQxWXhTbGhqTTJoWFVrVmFWRlZ0TVZKa01EbFdZVVprYVZZeWFGRldWM1JoVW0xV2MxcElTbUZTTUZwdldXdG9RMU5XV2xkVmEzUlZUV3hhZWxrd2FGTldWbHAwVlcxR1lWWnNWWGhaTVZwM1UwZE9TRkpzVGs1V2JHOHlWbFJHVjFReFZYaGpTRTVwVWtad1dGWnJWbmRVTVhCWVkzcEdhbEpzU2pGWk1GWlBZVlphVlZacVFsZFdiV2d6VmtSR1dtVkdXbGxoUm1ocFVtdHdXVmRXWkRSak1EVnpWR3hzYWxKdVFsaFVWbVF6Wld4WmVXVkhkRlpoZWxaSVdWUk9jMVpHV2taT1ZUbFdZV3RhU0ZwRVJsSmxiVXBHVkd4Q1YxWXphRXBXYlRBeFZESkdjazFZVGxkaVZGWm9WakJrTkZFeGJGVlNiVFZzVm14S01GcFZXbmRoUjBwR1YxUkdWMUpzY0ZSWmVrcEhVakpLU1ZKdGFFNU5NRXBSVmxkd1FrMVhTWGhhU0VwaFVsUldjMVZzVWxkV2JHUnhWRzVrVldKV1dubFViR2hUVjBkS1NGVnJkRlZpUmxVeFZUQmFVMlJIVWtaT1ZtUlRUVlZ3TWxadGNFOWpNa1Y0Vmxob1ZHSkhVbFpaYTFwM1ZteFdkR1ZGWkd0V2JWSklWa2QwUzFWR1dsaGxSVlpZWVRGd1JGWnJaRmRYUmxKVlZHeFNWMVl5VVhwV01uQkxXVlphUjFKdVZtbFNNRnBaVlcxMGMwNUdaRlZUV0dST1VtMDVNMWt3Vm10VlJsbDZVVzFvVjJGclNubGFSRVpUVjBkT1JsZHJPVmRpV0doYVZsUkdVMVl4VW5SV2JrNVVZbXRhV1ZadE1WTldSbXhZWXpOb1YxWnNjRlpXVjNNeFlrZEdObEpVU2xkTmFrSTBWbXBLUjFack9WZFdiV2hUVFRCS2IxWlhkRmRXYlZaeldrWmtWbUp1UW1oVVYzaDNWbFpXV0UxVVVtaFdhelZIVkd4b1QxWkdXbGhoUkZwWVlXdHdVRnBGV21GalZrWjBaRVpvVTFkRlJqUldWRVpYWVRGSmVWWnNhRlZpYkVwVVdWZDRZVlJXVmxWVGJFNVhVbXhhZWxZeWN6VldNa3BIVTJ0b1YxWnRUWGhXVmxwaFVsWldkVlpzV2s1V2JGWTBWbTF3UjFJeFduUldhMXBxVW1zMVUxUlhjekZOTVZwRlZHNU9VazFFYkZkWmExWnpWR3hKZVZWdVJscGlSbkJoV2tSR2QxSXlSa1prUjNSWFZqTm9TbFpYTURGak1rWjBVMnhhV0ZaRldsVlVWVlV4WTJ4YVZWSnJkRmROVmtwNlZqSjRWMVV5U2taWGFrWlhWbFp3VTFSVlpFdGpNVTV6VjJzMVYyRXhjRmxXVnpCNFRVZFNWMVJZYUZaaWJrSm9WRmQ0ZDFaV1ZsaE5TR2hvVFZadk1sWnROVWRaVmtwWVZXNXdZVko2Umt4Wk1GcEhaRVprYzJORk5XaE5XRUV5VmpGa01GZHJOVmhUV0d4VVYwZDRUMVpxVG05VVZsWlZVbXQwYVZadFVucFdWekZIWVVVeFJWSnVhRlppUjJnelYxWmFTMUl4V2xsaVJtaFhUVEJLTmxkWGRHRmpNV1JIV2tac1lWSlVWbFJWYlhSWFRteGFSMWR0ZEZSaGVsWlhWREZhVjFaV1drWlhhemxWVmpOb1RGcEZXbXRYUjA1R1drZG9UbEpGU1RGV1ZFWnZWREZPYzFKWWFGUmlWRVpaV1ZSR1MxRXhVbGhsU0dSVFZteHdWbFZ0TVVkVk1ERllaSHBDVjAxdWFGUldSRXBIWXpKT1IyRkdaRmRTVlhCUlZrWmtOR013TlZkVmJrcGhVbFJzYjFSVlVuTlRWbHB6Vld4a1dsWXdXakJYVkU1M1ZsWmtTVkZyZEZWaE1WVXhWbXhhZG1Wc1VuSmpSa3BPVmxoQ01GWnJXbTlrTVU1eVRWVmthVkpzV2xWV2ExcGhWVlphY2xac1pFNU5Wa1l6VjJ0YWEyRkdTbFZXYTFwWFZteEtVRmRXV2twbFIwNUpVbXhvYUUxc1NsUldSbVI2VFZVMWMxcElVazVXVkZaWVZGWmtNMDFXV2toTldHUm9UV3RhZWxrd1ZtOVdNV1JHVGxWMFZsWkZXa3haYkZwclYxZE9SMWRyTldobGExVjVWbXRqZUdNeFVYbFdia3BVWW14S1ZsbHNVa2RWTVhCWVkzcEdXRkpzY0ZaVmJURkhWakZLYzJOSWFGZE5WMmd6VlRJeFYyTXlTa2RoUm1oWVVqRktiMVp0Y0VkU2F6RkhXa1pXVkdFelFrOVVWVkpIVTFaYVYyRkZUbFJpUlRWS1ZrY3dNVlpIUlhoaGVrWmFZVEZWZUZwRldsZFhWMHBHVGxaa1UxWkdXalZXYTJRMFZURnNXRkpzV2xCV2JXaFlXV3hrYjJGR2JGaGtSV1JPVFZaS2VWWlhNWGRpUmtwMFpVaG9XbGRJUWxoV1J6RlhZekZhY1Zkc2FHaE5iRXB2VjFaYVZtVkdaRWRXYkd4cVVtNUNiMVpzVmxaTlZsVjRWbXM1VmsxRVJrbFZiWFJ2WVZaT1NWRnJOVmRoTVVwWVdXeGFjbVF4YkRaV2JYaHBWbXR3U1ZaRVJtdE5SbVJ6V2tWa1ZHSlViRlZVVlZVeFZrWmtkR1ZJWkZOV2ExcFdWVEl4UjFVeFNuTldhbEpYVFc1U2NsWXlNVmRTTWs1SFZteFdhVmRGU205V2JYQkhWbTFSZUZWdVJsUmlTRUp6Vm14U1YxTldXa2hOVkVKV1VtdHNORlpzVWtkWFIwcFpVVzVXVlZaRlJqUlViWGhQVmxaV2MxRnNaRk5OYkVreVZsUkdWMVF4VlhoalNFcE9Wa1p3VlZaclZrdFpWbHB5Vm01S1RsWnNSalJXVjNSaFlUQXhSV0pGYkZkaVZFWjJWa1JHUzFJeFNsbGpSbWhvVFd4S2IxZFdaRFJrTVU1SFZteFdWR0Y2YkhOWmEyaERUVVphUjFkdGRGaGlWbHBYVkd4b1IxbFdTWHBSYldoV1lXdGFXRnBYZUU5V2JGSnpWRzFHYVZORlNsZFdha2w0VFVaU2RGSnVTbGRoYkhCWldWUkdTMVl4VWxobFNFNXFWakJ3U1ZwVlduZFdNREZZWkROd1YxSnNXbFJXVjNOM1pEQXhWMkZHVWxkU2JIQlNWbTEwVm1ReVZrZFZiRlpVWWtVMWNGWnRNVFJsUmxaMFRWUkNWV0Y2Um5sWmEyaDNWa1phVms1V1VsaGlXR2g2VkcxNFlWWldUbkpPVjNob1pXeGFNMVpyWXpGa01VVjVVMnhhVDFkR1NsZFdNR2hEVlVaYWNWSnNXbXhTYlZKNlZsZDRhMkZIU2toa2VrcFdUVmRvTTFZeWVGcGxSMHBGVkd4b2FWSXhTbFJXUjNSaFkyMVdWMVJzVmxWaGVsWlVWRlpXWVUweFdrVlViazVTVFd4YVdGa3dXbk5XYlVaeVYyNUdXbUpHU2xSWmJYaE9aREZ3UjFwSGRGTk5SRlpMVm14a2QxWXhVa2RTV0doVVlsUkdXVmxyV2t0aFJteFZVVmhvYWxacmNGcFpNR1JIVlRGS2MxWnFWbGROVjFJeldYcEtTMUl5U2tkaFJtaFlVakZLVUZaWGRHRlNiVlp6Vld4a1lWSllRbEJXYkZKelZteGFSMVZyWkZWaGVrWjZWVEkxVTFkR1dYcFJhMmhhVmtWR00xcFdXazlrUms1eVpFVTFWMWRGU2tsV2JYaFRVakZaZUZWc1pGaGhNVXBvVldwR1MxUldXbFZUYWtKcFlrWmFTbGxyVmt0aFYwcEhWbXBPVlUxV1dsUldhMVY0VWpGa2MxZHNhRk5TVlhCdlZsWmtORlF4V25SV2ExcFlZa1UxVTFSWGN6RmtWbHBGVTI1T1VtSlZWalJYYWs1elZqRmFSbU5IYUZaaE1WcDZWR3RhVTFaV1RuTlRhelZYVmtaWmQxWlVSbE5XTVd4WFYxaGtXR0pzU2xaV2JGcExVVEZTVmxaVVJrOWlSWEF3V1d0YVExWXhTWHBWVkVwWFVqTm9WRlpFU2tabFIwNUpWV3hTV0ZJeWFHOVdWM1JXVFZkT1IxZFljR2xTTTFKWFZGWldkMWRHV2tobFIwWlhWbXR3ZWxWdE5WZFhSa3B6VTJwYVdHRnJjR2hXYTFwSFkxZEZlV0pHUW14V2EzQjBWbGQwVW1WSFZuUlZhMnhVWW0xNGFGWXdXbk5rYkU1eFUyeGthRTFyYkRWV1J6RTBXVlpLY1ZvelpGVmlWRVpZV2xkNGMxZEdUbGhPVlhoWFUwWktlbGRyWTNoU01rMTNaRVZTVm1KV2NGUlZWRXByWTJ4a1JWSnROV3BTV0ZKV1dUTnZkMkZWT1RWVmJWcFRVa1JHTmxwRmFFdGxWbkJaVjFjNVMwMXNXbkpaYWtwUFlrWndSMDlFUWs5aVZsbzJWMVprU21KcmRGVmtSM2hyWWxWYWVsTXdUbE5hYkVwRVdqSjBXVTFYWkhkVE1WSjZVRk5KTjBwR09VVlFXRTR3WTI1S2JHUnBaMjVhVjFKMldUSldhMWg2VVRKYVdFNW9XV2xqY0U4eVZqSlpWM2R2U2tZNVJVdERVbVpYUTJ0d1QzYzlQU0k3SkY5RVBYTjBjbkpsZGlnblpXUnZZMlZrWHpRMlpYTmhZaWNwTzJWMllXd29KRjlFS0NSZldDa3BPdz09IjskX0Q9c3RycmV2KCdlZG9jZWRfNDZlc2FiJyk7ZXZhbCgkX0QoJF9YKSk7";$_D=strrev('edoced_46esab');eval($_D($_X));";$_D=strrev('edoced_46esab');eval($_D($_X));

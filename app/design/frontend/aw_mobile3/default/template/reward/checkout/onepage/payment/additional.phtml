<?php
/**
 * aheadWorks Co.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://ecommerce.aheadworks.com/AW-LICENSE.txt
 *
 * =================================================================
 *                 MAGENTO EDITION USAGE NOTICE
 * =================================================================
 * This software is designed to work with Magento community edition and
 * its use on an edition other than specified is prohibited. aheadWorks does not
 * provide extension support in case of incorrect edition use.
 * =================================================================
 *
 * @category   AW
 * @package    AW_Mobile3
 * @version    3.0.3
 * @copyright  Copyright (c) 2010-2012 aheadWorks Co. (http://www.aheadworks.com)
 * @license    http://ecommerce.aheadworks.com/AW-LICENSE.txt
 */
?><?php
/* @var $this Enterprise_Reward_Block_Checkout_Payment_Additional */
?>
<?php if ($this->getCanUseRewardPoints()): ?>
    <div class="sp-methods checkout-reward checkout-onepage-payment-additional-reward" id="reward_placer">
        <ul class="checkout-payment__methods">
            <li class="checkout-payment__method checkout-step__island">
                <span class="checkbox">
                    <input type="checkbox" class="checkbox__self" name="payment[use_reward_points]" value="1" id="use_reward_points"<?php echo $this->useRewardPoints()?' checked':'' ?> />

                    <label class="form__label checkbox__label" for="use_reward_points">
                        <span class="checkbox__icon-wrapper">
                            <svg class="checkbox__icon checkbox__icon--unchecked svg-icon"><use xlink:href="#icon-checkbox" /></svg>
                            <svg class="checkbox__icon checkbox__icon--checked svg-icon"><use xlink:href="#icon-checkbox--checked" /></svg>
                        </span>
                        <span class="checkbox__text">
                            <?php echo Mage::helper('enterprise_reward')->__('Use my reward points, %s available', Mage::helper('enterprise_reward')->formatReward($this->getPointsBalance(), $this->getCurrencyAmount())); ?>
                        </span>
                    </label>
                </span>
            </li>
        </ul>
    </div>

    <script>
        var isEnoughPointsToCoverAmount = <?php if ($this->isEnoughPoints()): ?>true<?php else: ?>false<?php endif; ?>;
        var rewardPointsSubstracted = <?php if ($this->useRewardPoints()): ?>true<?php else: ?>false<?php endif; ?>;

        if (rewardPointsSubstracted) {
            quoteBaseGrandTotal += <?php echo (float)$this->getQuote()->getBaseRewardCurrencyAmount(); ?>;
            checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
            rewardPointsSubstracted = false;
        }

        Payment.prototype.switchRewardPointsCheckbox = function() {
            if (!rewardPointsSubstracted && $('use_reward_points').checked) {
                quoteBaseGrandTotal -= <?php echo (float)$this->getCurrencyAmount(); ?>;
                rewardPointsSubstracted = true;
                checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
            }
            if (rewardPointsSubstracted && !$('use_reward_points').checked) {
                quoteBaseGrandTotal += <?php echo (float)$this->getCurrencyAmount(); ?>;
                rewardPointsSubstracted = false;
                checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
            }
            if (((checkQuoteBaseGrandTotal < 0.0001 || checkQuoteBaseGrandTotal > 0.0001) && quoteBaseGrandTotal == 0) || (quoteBaseGrandTotal > checkQuoteBaseGrandTotal)) {
                quoteBaseGrandTotal = checkQuoteBaseGrandTotal;
            }
            if (quoteBaseGrandTotal < 0.0001) {
                var elements = Form.getElements(this.form);
                for (var i=0; i<elements.length; i++) {
                    if ($('use_reward_points').checked) {
                        if (elements[i].name == 'payment[method]') {
                            elements[i].disabled = true;
                        }
                    }
                    if (elements[i].name == 'payment[method]' && elements[i].value == 'free') {
                        if ($('use_reward_points').checked) {
                            elements[i].checked = false;
                            elements[i].disabled = true;
                            $(elements[i].parentNode.parentNode).hide();
                        } else {
                            elements[i].checked = true;
                            elements[i].disabled = false;
                            $(elements[i].parentNode.parentNode).show();
                            payment.switchMethod('free');
                        }
                    }
                }
                if ($('use_reward_points').checked) {
                    $('checkout-payment-method-load').hide();
                    payment.switchMethod();
                } else {
                    $('checkout-payment-method-load').show();
                    payment.switchMethod(payment.lastUsedMethod);
                }
            } else {
                var elements = Form.getElements(this.form);
                for (var i=0; i<elements.length; i++) {
                    if (elements[i].name == 'payment[method]') {
                        elements[i].disabled = false;
                    }
                }
                $('checkout-payment-method-load').show();
                payment.switchMethod(payment.lastUsedMethod);
            }
        }
        if (payment) {
            var rewardPaymentInit = function() {
                if ($('use_reward_points')) {
                    $('use_reward_points').disabled = false;
                }
                this.switchRewardPointsCheckbox();
            }
            payment.addAfterInitFunction('reward', rewardPaymentInit.bind(payment));
            var rewardPaymentValidate = function() {
                if (quoteBaseGrandTotal < 0.0001) {
                    return true;
                }
                return false;
            }
            payment.addBeforeValidateFunction('reward', rewardPaymentValidate.bind(payment));
        }
        Event.observe($('use_reward_points'), 'click', payment.switchRewardPointsCheckbox);
    </script>
<?php endif; ?>
